<!DOCTYPE html>
<html lang="en">
<head>
  <title>Connection Required</title>

  <meta charset="utf-8">
  <meta name="author" content="Zach Moazeni">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link href="/css/main.min.css?v=4" media="screen" rel="stylesheet" type="text/css" />
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,400i,600,600i,700" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="Connection Required" href="/feed/atom/" />
</head>
<body>
  <header>
    <nav class="row align-center">
      <div class="small-12 columns">
        <a class="brand text-center" href="/"><svg id="svg3542" height="21.913mm" width="168.74mm" version="1.1" viewBox="0 0 597.91431 77.643914">
 <defs id="defs3544">
  <filter id="filter6021" style="color-interpolation-filters:sRGB">
   <feFlood id="feFlood6023" result="flood" flood-opacity=".49804" flood-color="rgb(0,0,0)"/>
   <feComposite id="feComposite6025" operator="in" result="composite1" in2="SourceGraphic" in="flood"/>
   <feGaussianBlur id="feGaussianBlur6027" stdDeviation="3" result="blur" in="composite1"/>
   <feOffset id="feOffset6029" result="offset" dx="6" dy="6"/>
   <feComposite id="feComposite6031" operator="over" result="composite2" in2="offset" in="SourceGraphic"/>
  </filter>
 </defs>
 <g id="layer1" transform="translate(-623.9 295.03)">
  <g id="g6014" transform="translate(-153.57 1274.5)" filter="url(#filter6021)">
   <text id="text3365-6-5-6" style="word-spacing:0px;letter-spacing:0px" font-weight="600" font-size="50px" font-style="italic" y="-1510.3744" x="824.00177" font-family="&apos;Open Sans&apos;" xml:space="preserve"><tspan id="tspan3373-3-1-62" font-weight="600" font-size="50px" font-style="italic" y="-1510.3744" x="824.00177" font-family="&apos;Open Sans&apos;">Connec   ion </tspan></text>
   <path id="path3395-8-6-2-7" d="m1031.5-1538.9-15.848 0.076c-0.3921 0-0.6466-0.5346-0.4683-0.9871l8.7598-22.221c0.2634-0.6681-0.3814-1.314-0.8142-0.8157l-27.274 31.402c-0.35829 0.4126-0.13598 1.1803 0.34336 1.1855l14.468 0.1604c0.3772 0 0.6274 0.508 0.4739 0.9545l-7.3598 21.41c-0.2282 0.6636 0.3997 1.2649 0.8225 0.7874l27.243-30.763c0.3656-0.4127 0.139-1.1922-0.346-1.1899z"/>
   <text id="text3365-9-6-9-7" style="word-spacing:0px;letter-spacing:0px" font-weight="600" font-size="50px" font-style="italic" y="-1510.3744" x="1120.1641" font-family="&apos;Open Sans&apos;" xml:space="preserve"><tspan id="tspan3373-5-4-7-6" font-weight="600" font-size="50px" font-style="italic" y="-1510.3744" x="1120.1641" font-family="&apos;Open Sans&apos;">Required</tspan></text>
  </g>
 </g>
</svg>
 <span>Connection Required</span></a>
      </div>

      <a href="#" class="about" data-toggle="offCanvas" onclick="return false">about</a>
    </nav>
  </header>

  <div class="off-canvas position-left" id="offCanvas" data-off-canvas data-transition="overlap">
    <div class="sidebar">
  <button class="close-button" aria-label="Close menu" type="button" data-close>
    <span aria-hidden="true">&times;</span>
  </button>

  <div class="row">
    <h2 class="columns">About Zach</h2>
  </div>

  <div class="row">
    <div class="columns">
      <div class="row">
        <p class="columns">Zach is a software developer who has worked on a range of projects. He currently writes Ruby by day for <a href="https://www.getharvest.com/">Harvest</a> and plays with other languages by night (currently Haskell, Scala, Clojure, and Rust). He knows how to laugh at himself and loves to ship software. He is a father of two wonderful kids and a husband to a fantastic wife.</p>
      </div>

      <div class="row">
        <p class="columns">
          <a href="mailto:zach.moazeni@gmail.com">email</a> ϟ <a href="https://github.com/zmoazeni">github</a> ϟ <a href="https://twitter.com/zmoazeni">twitter</a> ϟ <a href="https://www.linkedin.com/in/zmoazeni/">linkedin</a>
        </p>
      </div>

      <h3 class="row columns">Notable Projects</h3>

      <div class="row">
        <ul class="columns">
          <li><a href="http://zmoazeni.github.io/csscss/">csscss</a></li>
          <li><a href="http://zmoazeni.github.io/harvested/">harvested</a></li>
          <li><a href="http://zmoazeni.github.io/gitspective/">gitspective</a></li>
        </ul>
      </div>
    </div>
  </div>

  <div class="row columns">
    <img src="/uploads/me.jpg" alt="Picture of Zach" />
  </div>
</div>

  </div>

  <main class="off-canvas-content" data-off-canvas-content>
    
      <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Connection ϟ Required</title>
 <link href="/feed/atom/" rel="self"/>
 <link href="/"/>
 <updated>2018-11-10T19:16:51+00:00</updated>
 <id>/</id>
 <author>
   <name>Zach Moazeni</name>
   <email>zach.moazeni@gmail.com</email>
 </author>


 
 <entry>
   <title>Improving Report Performance</title>
   <link href="/blog/2017/06/improving-report-performance"/>
   <updated>2017-06-06T14:00:00+00:00</updated>
   <id>/blog/2017/06/improving-report-performance</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;&lt;em&gt;Originally posted to &lt;a href=&quot;http://techtime.getharvest.com/blog/improving-report-performance&quot;&gt;http://techtime.getharvest.com/blog/improving-report-performance&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year, I &lt;a href=&quot;https://www.getharvest.com/blog/2016/12/a-gift-of-time/&quot;&gt;made a promise&lt;/a&gt; to share the gritty details of how we improved our reporting performance dramatically, anywhere from a factor of 4x to 10x. I spent over a year on this project and I am very pleased with the results. I want to share some of our wins with you all in case they help anyone else.&lt;/p&gt;

&lt;p&gt;First, you have to know a little about our data model for these gains to make sense. Our customers have users in their account track time for tasks on projects they’re assigned to.&lt;/p&gt;

&lt;svg version=&quot;1.2&quot; viewBox=&quot;0 0 17780 12700&quot; preserveAspectRatio=&quot;xMidYMid&quot; fill-rule=&quot;evenodd&quot; stroke-width=&quot;28.222&quot; stroke-linejoin=&quot;round&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:ooo=&quot;http://xml.openoffice.org/svg/export&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:presentation=&quot;http://sun.com/xmlns/staroffice/presentation&quot; xmlns:smil=&quot;http://www.w3.org/2001/SMIL20/&quot; xmlns:anim=&quot;urn:oasis:names:tc:opendocument:xmlns:animation:1.0&quot; xml:space=&quot;preserve&quot;&gt;
 &lt;defs class=&quot;ClipPathGroup&quot;&gt;
  &lt;clipPath id=&quot;presentation_clip_path&quot; clipPathUnits=&quot;userSpaceOnUse&quot;&gt;
   &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;17780&quot; height=&quot;12700&quot; /&gt;
  &lt;/clipPath&gt;
 &lt;/defs&gt;
 &lt;defs class=&quot;TextShapeIndex&quot;&gt;
  &lt;g ooo:slide=&quot;id1&quot; ooo:id-list=&quot;id3 id4 id5 id6 id7 id8 id9 id10 id11 id12 id13 id14 id15&quot; /&gt;
 &lt;/defs&gt;
 &lt;defs class=&quot;EmbeddedBulletChars&quot;&gt;
  &lt;g id=&quot;bullet-char-template(57356)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 580,1141 L 1163,571 580,0 -4,571 580,1141 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(57354)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 8,1128 L 1137,1128 1137,0 8,0 8,1128 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(10146)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 174,0 L 602,739 174,1481 1456,739 174,0 Z M 1358,739 L 309,1346 659,739 1358,739 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(10132)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 2015,739 L 1276,0 717,0 1260,543 174,543 174,936 1260,936 717,1481 1274,1481 2015,739 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(10007)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 0,-2 C -7,14 -16,27 -25,37 L 356,567 C 262,823 215,952 215,954 215,979 228,992 255,992 264,992 276,990 289,987 310,991 331,999 354,1012 L 381,999 492,748 772,1049 836,1024 860,1049 C 881,1039 901,1025 922,1006 886,937 835,863 770,784 769,783 710,716 594,584 L 774,223 C 774,196 753,168 711,139 L 727,119 C 717,90 699,76 672,76 641,76 570,178 457,381 L 164,-76 C 142,-110 111,-127 72,-127 30,-127 9,-110 8,-76 1,-67 -2,-52 -2,-32 -2,-23 -1,-13 0,-2 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(10004)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 285,-33 C 182,-33 111,30 74,156 52,228 41,333 41,471 41,549 55,616 82,672 116,743 169,778 240,778 293,778 328,747 346,684 L 369,508 C 377,444 397,411 428,410 L 1163,1116 C 1174,1127 1196,1133 1229,1133 1271,1133 1292,1118 1292,1087 L 1292,965 C 1292,929 1282,901 1262,881 L 442,47 C 390,-6 338,-33 285,-33 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(9679)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(8226)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 346,457 C 273,457 209,483 155,535 101,586 74,649 74,723 74,796 101,859 155,911 209,963 273,989 346,989 419,989 480,963 531,910 582,859 608,796 608,723 608,648 583,586 532,535 482,483 420,457 346,457 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(8211)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z&quot; /&gt;
  &lt;/g&gt;
 &lt;/defs&gt;
 &lt;defs class=&quot;TextEmbeddedBitmaps&quot; /&gt;
 &lt;g&gt;
  &lt;g id=&quot;id2&quot; class=&quot;Master_Slide&quot;&gt;
   &lt;g id=&quot;bg-id2&quot; class=&quot;Background&quot; /&gt;
   &lt;g id=&quot;bo-id2&quot; class=&quot;BackgroundObjects&quot; /&gt;
  &lt;/g&gt;
 &lt;/g&gt;
 &lt;g class=&quot;SlideGroup&quot;&gt;
  &lt;g&gt;
   &lt;g id=&quot;id1&quot; class=&quot;Slide&quot; clip-path=&quot;url(#presentation_clip_path)&quot;&gt;
    &lt;g class=&quot;Page&quot;&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id3&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;6349&quot; y=&quot;7619&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(255,99,71)&quot; stroke=&quot;none&quot; d=&quot;M 8890,12700 L 6350,12700 6350,7620 11430,7620 11430,12700 8890,12700 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 8890,12700 L 6350,12700 6350,7620 11430,7620 11430,12700 8890,12700 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;6854&quot; y=&quot;10406&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Time Entry&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id4&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;-1&quot; y=&quot;-1&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(60,179,113)&quot; stroke=&quot;none&quot; d=&quot;M 2540,5080 L 0,5080 0,0 5080,0 5080,5080 2540,5080 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 2540,5080 L 0,5080 0,0 5080,0 5080,5080 2540,5080 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;1679&quot; y=&quot;2786&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;User&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id5&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;12699&quot; y=&quot;-1&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(192,192,192)&quot; stroke=&quot;none&quot; d=&quot;M 15240,5080 L 12700,5080 12700,0 17780,0 17780,5080 15240,5080 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 15240,5080 L 12700,5080 12700,0 17780,0 17780,5080 15240,5080 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;14383&quot; y=&quot;2786&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Task&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id6&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;6349&quot; y=&quot;-1&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(255,255,102)&quot; stroke=&quot;none&quot; d=&quot;M 8890,5080 L 6350,5080 6350,0 11430,0 11430,5080 8890,5080 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 8890,5080 L 6350,5080 6350,0 11430,0 11430,5080 8890,5080 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;7582&quot; y=&quot;2786&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Project&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id7&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;11430&quot; y=&quot;5079&quot; width=&quot;3812&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 15240,5080 L 11788,7381&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 11430,7620 L 11888,7495 11721,7246 11430,7620 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id8&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;11430&quot; y=&quot;7547&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;11680&quot; y=&quot;8256&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id9&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;15182&quot; y=&quot;5080&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;15432&quot; y=&quot;5789&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id10&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;8613&quot; y=&quot;5079&quot; width=&quot;301&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 8763,5080 L 8763,7190&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 8763,7620 L 8913,7170 8613,7170 8763,7620 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id11&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;1720&quot; y=&quot;5080&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;1970&quot; y=&quot;5789&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id12&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;8832&quot; y=&quot;5083&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;9082&quot; y=&quot;5792&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id13&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;8799&quot; y=&quot;6604&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;9049&quot; y=&quot;7313&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id14&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;2539&quot; y=&quot;5079&quot; width=&quot;3812&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 2540,5080 L 5992,7381&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 6350,7620 L 6059,7246 5892,7495 6350,7620 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id15&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;5461&quot; y=&quot;7547&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;5711&quot; y=&quot;8256&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
  &lt;/g&gt;
 &lt;/g&gt;
&lt;/svg&gt;

&lt;p&gt;We use Percona MySQL in production. We have verified that all of our indexes are appropriate, and our queries are using the right indexes. So we knew that in order to get better performance out of these queries we needed to make some architectural changes. I spent around a month experimenting with a few different approaches on hardware similar to production using the production dataset. After trial and error, and looking at the resulting numbers, I finally had a plan.&lt;/p&gt;

&lt;h2 id=&quot;improvement-1-organize-time-entries-table-by-project&quot;&gt;Improvement 1: Organize time entries table by project&lt;/h2&gt;

&lt;p&gt;My first change may sound strange to Rails developers, but made a lot of sense at the MySQL layer. I reorganized the data on disk by changing the primary key of our time entries table. A table that holds over 500 million rows. This is not a MySQL-specific concept. If you’re interested you can also search for “clustered index”, but for MySQL the primary key is the clustered index.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html&quot;&gt;MySQL’s docs&lt;/a&gt; explain it better than I can:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Accessing a row through the clustered index is fast because the index search leads directly to the page with all the row data. If a table is large, the clustered index architecture often saves a disk I/O operation when compared to storage organizations that store row data using a different page from the index record.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Making this change sped up our report queries instantly by about 50% across the board (queries that took 12 seconds now took around 6 seconds).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MySQL stores data in pages, or clumps of rows/records. By default, for typical tables with an auto-incremented id, that means related rows are scattered around the disk based on the order they were inserted. Most of our queries retrieve and report on all time entries for a given project, so when I changed the primary key from &lt;code class=&quot;highlighter-rouge&quot;&gt;(id)&lt;/code&gt; to an existing index which is &lt;code class=&quot;highlighter-rouge&quot;&gt;(project_id, spent_at, id)&lt;/code&gt;, it meant that on disk all time entries for a given project were sitting next to each other. Reducing a lot of random access.&lt;/p&gt;

&lt;p&gt;To help illustrate the point. Let’s assume I have a page of rows organized by the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; column. It might look something like this.&lt;/p&gt;

&lt;table&gt;
  &lt;colgroup&gt;
    &lt;col width=&quot;25%&quot; /&gt;
    &lt;col width=&quot;25%&quot; /&gt;
    &lt;col width=&quot;50%&quot; /&gt;
  &lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;header&quot;&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;project_id&lt;/th&gt;
      &lt;th&gt;notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;Reviewed Web Design&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1001&lt;/td&gt;
      &lt;td&gt;203&lt;/td&gt;
      &lt;td&gt;Spoke with client&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1002&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;Worked on new logo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1003&lt;/td&gt;
      &lt;td&gt;203&lt;/td&gt;
      &lt;td&gt;Wrote down meeting notes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see, two entirely separate projects are intertwined together based on the id order. However once I change the primary key to be based on the project id, we get something like this:&lt;/p&gt;

&lt;table&gt;
  &lt;colgroup&gt;
    &lt;col width=&quot;25%&quot; /&gt;
    &lt;col width=&quot;25%&quot; /&gt;
    &lt;col width=&quot;50%&quot; /&gt;
  &lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr class=&quot;header&quot;&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;project_id&lt;/th&gt;
      &lt;th&gt;notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;Reviewed Web Design&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1002&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;Worked on new logo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;Helped web designer with CSS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5000&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;Final call with client&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;All time entries for that project are now grouped together within the pages on disk.&lt;/p&gt;

&lt;p&gt;Now I was really skeptical that this would have any performance boost because our monster database servers are using high performance enterprise SSDs in a RAID 10. On top of that, we have an extremely large InnoDB Buffer Pool with a hit rate of around 99%. So most data is served from memory, and even if it does have to hit the disk, it’s still much faster than than a traditional spinning platter. But our metrics proved me wrong and we were able to take an easy win right away.&lt;/p&gt;

&lt;p&gt;To keep Rails happy, we still have the auto-incremented id, but I added a manual unique index on it and I added &lt;code class=&quot;highlighter-rouge&quot;&gt;self.primary_key = :id&lt;/code&gt; to the top of our time entry model. But for all intents and purposes this change is transparent to Rails and the rest of our code.&lt;/p&gt;

&lt;p&gt;This technique is not a free lunch. This will create more data pages overall for the table because MySQL will want to keep a portion of the page empty as defined by the &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/index-page-merge-threshold.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MERGE_THRESHOLD&lt;/code&gt;&lt;/a&gt;. We are effectively trading disk space for much better read performance, and in our scenario that was perfectly acceptable. The disk space required for the time entries table ballooned after this change (and the next one I’ll talk about). If you are interested in more information about MySQL’s page mechanics, take a look at &lt;a href=&quot;https://www.percona.com/blog/2017/04/10/innodb-page-merging-and-page-splitting/&quot;&gt;this great post on Percona’s blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvement-2-denormalize-important-reporting-data-into-time-entries&quot;&gt;Improvement 2: Denormalize important reporting data into time entries&lt;/h2&gt;

&lt;p&gt;The next step to increasing performance was to denormalize the important reporting data into the time entries table. This is not a new practice at all, but it did have some shocking results for our data set.&lt;/p&gt;

&lt;p&gt;One thing to know is that Harvest also allows a lot of flexibility in the way a project can be configured. Those settings will determine what time is billable and by how much. Meaning that some combinations of project settings store important report information in the join tables. For example, a project may bill by a person’s hourly rate. So for our report queries we also have to join those tables in order to have all the key pieces of information available. As you can imagine our reporting queries end up requiring a lot of boilerplate for our joins.&lt;/p&gt;

&lt;svg version=&quot;1.2&quot; viewBox=&quot;0 0 17780 20320&quot; preserveAspectRatio=&quot;xMidYMid&quot; fill-rule=&quot;evenodd&quot; stroke-width=&quot;28.222&quot; stroke-linejoin=&quot;round&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:ooo=&quot;http://xml.openoffice.org/svg/export&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:presentation=&quot;http://sun.com/xmlns/staroffice/presentation&quot; xmlns:smil=&quot;http://www.w3.org/2001/SMIL20/&quot; xmlns:anim=&quot;urn:oasis:names:tc:opendocument:xmlns:animation:1.0&quot; xml:space=&quot;preserve&quot;&gt;
 &lt;defs class=&quot;ClipPathGroup&quot;&gt;
  &lt;clipPath id=&quot;presentation_clip_path&quot; clipPathUnits=&quot;userSpaceOnUse&quot;&gt;
   &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;17780&quot; height=&quot;20320&quot; /&gt;
  &lt;/clipPath&gt;
 &lt;/defs&gt;
 &lt;defs class=&quot;TextShapeIndex&quot;&gt;
  &lt;g ooo:slide=&quot;id1&quot; ooo:id-list=&quot;id3 id4 id5 id6 id7 id8 id9 id10 id11 id12 id13 id14 id15 id16 id17 id18 id19 id20 id21 id22 id23 id24 id25 id26 id27 id28 id29 id30 id31 id32 id33&quot; /&gt;
 &lt;/defs&gt;
 &lt;defs class=&quot;EmbeddedBulletChars&quot;&gt;
  &lt;g id=&quot;bullet-char-template(57356)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 580,1141 L 1163,571 580,0 -4,571 580,1141 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(57354)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 8,1128 L 1137,1128 1137,0 8,0 8,1128 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(10146)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 174,0 L 602,739 174,1481 1456,739 174,0 Z M 1358,739 L 309,1346 659,739 1358,739 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(10132)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 2015,739 L 1276,0 717,0 1260,543 174,543 174,936 1260,936 717,1481 1274,1481 2015,739 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(10007)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 0,-2 C -7,14 -16,27 -25,37 L 356,567 C 262,823 215,952 215,954 215,979 228,992 255,992 264,992 276,990 289,987 310,991 331,999 354,1012 L 381,999 492,748 772,1049 836,1024 860,1049 C 881,1039 901,1025 922,1006 886,937 835,863 770,784 769,783 710,716 594,584 L 774,223 C 774,196 753,168 711,139 L 727,119 C 717,90 699,76 672,76 641,76 570,178 457,381 L 164,-76 C 142,-110 111,-127 72,-127 30,-127 9,-110 8,-76 1,-67 -2,-52 -2,-32 -2,-23 -1,-13 0,-2 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(10004)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 285,-33 C 182,-33 111,30 74,156 52,228 41,333 41,471 41,549 55,616 82,672 116,743 169,778 240,778 293,778 328,747 346,684 L 369,508 C 377,444 397,411 428,410 L 1163,1116 C 1174,1127 1196,1133 1229,1133 1271,1133 1292,1118 1292,1087 L 1292,965 C 1292,929 1282,901 1262,881 L 442,47 C 390,-6 338,-33 285,-33 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(9679)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(8226)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M 346,457 C 273,457 209,483 155,535 101,586 74,649 74,723 74,796 101,859 155,911 209,963 273,989 346,989 419,989 480,963 531,910 582,859 608,796 608,723 608,648 583,586 532,535 482,483 420,457 346,457 Z&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;bullet-char-template(8211)&quot; transform=&quot;scale(0.00048828125,-0.00048828125)&quot;&gt;
   &lt;path d=&quot;M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z&quot; /&gt;
  &lt;/g&gt;
 &lt;/defs&gt;
 &lt;defs class=&quot;TextEmbeddedBitmaps&quot; /&gt;
 &lt;g&gt;
  &lt;g id=&quot;id2&quot; class=&quot;Master_Slide&quot;&gt;
   &lt;g id=&quot;bg-id2&quot; class=&quot;Background&quot; /&gt;
   &lt;g id=&quot;bo-id2&quot; class=&quot;BackgroundObjects&quot; /&gt;
  &lt;/g&gt;
 &lt;/g&gt;
 &lt;g class=&quot;SlideGroup&quot;&gt;
  &lt;g&gt;
   &lt;g id=&quot;id1&quot; class=&quot;Slide&quot; clip-path=&quot;url(#presentation_clip_path)&quot;&gt;
    &lt;g class=&quot;Page&quot;&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id3&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;6349&quot; y=&quot;15239&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(255,99,71)&quot; stroke=&quot;none&quot; d=&quot;M 8890,20320 L 6350,20320 6350,15240 11430,15240 11430,20320 8890,20320 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 8890,20320 L 6350,20320 6350,15240 11430,15240 11430,20320 8890,20320 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;6854&quot; y=&quot;18026&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Time Entry&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id4&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;-1&quot; y=&quot;7619&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(60,179,113)&quot; stroke=&quot;none&quot; d=&quot;M 2540,12700 L 0,12700 0,7620 5080,7620 5080,12700 2540,12700 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 2540,12700 L 0,12700 0,7620 5080,7620 5080,12700 2540,12700 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;1679&quot; y=&quot;10406&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;User&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id5&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;12699&quot; y=&quot;7619&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(192,192,192)&quot; stroke=&quot;none&quot; d=&quot;M 15240,12700 L 12700,12700 12700,7620 17780,7620 17780,12700 15240,12700 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 15240,12700 L 12700,12700 12700,7620 17780,7620 17780,12700 15240,12700 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;14383&quot; y=&quot;10406&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Task&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id6&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;6349&quot; y=&quot;7619&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(255,255,102)&quot; stroke=&quot;none&quot; d=&quot;M 8890,12700 L 6350,12700 6350,7620 11430,7620 11430,12700 8890,12700 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 8890,12700 L 6350,12700 6350,7620 11430,7620 11430,12700 8890,12700 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;7582&quot; y=&quot;10406&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Project&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id7&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;11430&quot; y=&quot;12699&quot; width=&quot;3812&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 15240,12700 L 11788,15001&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 11430,15240 L 11888,15115 11721,14866 11430,15240 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id8&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;11430&quot; y=&quot;15167&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;11680&quot; y=&quot;15876&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id9&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;15182&quot; y=&quot;12700&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;15432&quot; y=&quot;13409&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id10&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;8613&quot; y=&quot;12699&quot; width=&quot;301&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 8763,12700 L 8763,14810&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 8763,15240 L 8913,14790 8613,14790 8763,15240 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id11&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;1720&quot; y=&quot;12700&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;1970&quot; y=&quot;13409&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id12&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;8832&quot; y=&quot;12703&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;9082&quot; y=&quot;13412&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id13&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;8799&quot; y=&quot;14224&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;9049&quot; y=&quot;14933&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id14&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;2539&quot; y=&quot;12699&quot; width=&quot;3812&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 2540,12700 L 5992,15001&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 6350,15240 L 6059,14866 5892,15115 6350,15240 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id15&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;5461&quot; y=&quot;15167&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;5711&quot; y=&quot;15876&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id16&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;3174&quot; y=&quot;-1&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(173,255,47)&quot; stroke=&quot;none&quot; d=&quot;M 5715,5080 L 3175,5080 3175,0 8255,0 8255,5080 5715,5080 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 5715,5080 L 3175,5080 3175,0 8255,0 8255,5080 5715,5080 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;4765&quot; y=&quot;2383&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;User &lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;3567&quot; y=&quot;3188&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Assignment&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id17&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;3556&quot; y=&quot;5079&quot; width=&quot;1526&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 5080,5080 L 3777,7251&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 3556,7620 L 3916,7311 3659,7157 3556,7620 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id18&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;6349&quot; y=&quot;5079&quot; width=&quot;1399&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 6350,5080 L 7540,7243&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 7747,7620 L 7662,7153 7399,7298 7747,7620 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.CustomShape&quot;&gt;
      &lt;g id=&quot;id19&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;9524&quot; y=&quot;-1&quot; width=&quot;5083&quot; height=&quot;5083&quot; /&gt;
       &lt;path fill=&quot;rgb(255,235,205)&quot; stroke=&quot;none&quot; d=&quot;M 12065,5080 L 9525,5080 9525,0 14605,0 14605,5080 12065,5080 Z&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(52,101,164)&quot; d=&quot;M 12065,5080 L 9525,5080 9525,0 14605,0 14605,5080 12065,5080 Z&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;11119&quot; y=&quot;2383&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Task &lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;706px&quot; font-weight=&quot;700&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;9917&quot; y=&quot;3188&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;Assignment&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id20&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;10160&quot; y=&quot;5079&quot; width=&quot;1272&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 11430,5080 L 10352,7235&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 10160,7620 L 10495,7285 10227,7150 10160,7620 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.LineShape&quot;&gt;
      &lt;g id=&quot;id21&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;12699&quot; y=&quot;5079&quot; width=&quot;1399&quot; height=&quot;2542&quot; /&gt;
       &lt;path fill=&quot;none&quot; stroke=&quot;rgb(0,0,0)&quot; d=&quot;M 12700,5080 L 13890,7243&quot; /&gt;
       &lt;path fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot; d=&quot;M 14097,7620 L 14012,7153 13749,7298 14097,7620 Z&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id22&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;2794&quot; y=&quot;6604&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;3044&quot; y=&quot;7313&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id23&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;3820&quot; y=&quot;5080&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;4070&quot; y=&quot;5789&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id24&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;7747&quot; y=&quot;6645&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;7997&quot; y=&quot;7354&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id25&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;6868&quot; y=&quot;5080&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;7118&quot; y=&quot;5789&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id26&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;2795&quot; y=&quot;6605&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;3045&quot; y=&quot;7314&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id27&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;3821&quot; y=&quot;5081&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;4071&quot; y=&quot;5790&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id28&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;14087&quot; y=&quot;6645&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;14337&quot; y=&quot;7354&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id29&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;13208&quot; y=&quot;5080&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;13458&quot; y=&quot;5789&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id30&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;7747&quot; y=&quot;6645&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;7997&quot; y=&quot;7354&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id31&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;6868&quot; y=&quot;5080&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;7118&quot; y=&quot;5789&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id32&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;9398&quot; y=&quot;6645&quot; width=&quot;774&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;9648&quot; y=&quot;7354&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g class=&quot;com.sun.star.drawing.TextShape&quot;&gt;
      &lt;g id=&quot;id33&quot;&gt;
       &lt;rect class=&quot;BoundingBox&quot; stroke=&quot;none&quot; fill=&quot;none&quot; x=&quot;10160&quot; y=&quot;5121&quot; width=&quot;880&quot; height=&quot;976&quot; /&gt;
       &lt;text class=&quot;TextShape&quot;&gt;&lt;tspan class=&quot;TextParagraph&quot; font-family=&quot;Georgia, serif&quot; font-size=&quot;635px&quot; font-weight=&quot;400&quot;&gt;&lt;tspan class=&quot;TextPosition&quot; x=&quot;10410&quot; y=&quot;5830&quot;&gt;&lt;tspan fill=&quot;rgb(0,0,0)&quot; stroke=&quot;none&quot;&gt;n&lt;/tspan&gt;&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
  &lt;/g&gt;
 &lt;/g&gt;
&lt;/svg&gt;

&lt;p&gt;If you have used our public API, these concepts will be rather straight forward.&lt;/p&gt;

&lt;p&gt;If you look back at that graph, you can imagine how our queries reporting on time entries would have to continue to join both the user and task assignments tables. Just looking at “what is the billable rate for this time entry” could end up looking at either the project, user assignment, or task assignment based on how the project is setup to be billed (billed by project, user, or task). Even asking “is this time entry billable?” will always consult the task assignments table (a task is marked billable or non-billable for a given project).&lt;/p&gt;

&lt;p&gt;That means in order to show anything meaningful for our customers, we have to join these tables all the time. The nice thing about that design is that if a value changes in one place, all reports are instantly updated.&lt;/p&gt;

&lt;p&gt;However, what I didn’t realize was the cost involved in joining those tables. As I said previously, our indexes are set up just fine. However even with great indexes, when you take millions of time entry rows and join them to hundreds of related task assignment rows, there is still lots of work for MySQL to process. All things considered, it is rather impressive how quickly it can process that much work. But even after I reorganized the time entries table, I wanted better performance than our 6 second worst case query.&lt;/p&gt;

&lt;p&gt;So in addition to changing the primary key, I also added a few more columns on the time entries table, like &lt;code class=&quot;highlighter-rouge&quot;&gt;billable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;billable_rate&lt;/code&gt;. I also updated our Rails code to populate those fields when a time entry was created or updated, and &lt;strong&gt;also&lt;/strong&gt; when a project’s settings changed dramatically.&lt;/p&gt;

&lt;p&gt;This section of denormalization code is complex. However, the upshot is that now all of our reporting queries have immediate access to the necessary data at the time entries level. We no longer need to join any other tables in order to calculate reporting data, meaning our reporting queries become easier to understand and maintain and less error prone. It also means that the bulk of the complexity is isolated to one section that the rest of the application depends on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shockingly, that took our worst case 6 second query down to around 1.5 seconds by just eliminating those joins.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To step back, with these two changes, our worst case 12 second query was now around 1.5 seconds. Decent sized projects that originally took around 2 seconds now ran in 0.25 seconds. Both of these changes contributed to this massive performance boost.&lt;/p&gt;

&lt;p&gt;Just like changing the primary key, this strategy isn’t a free lunch either. Now that the reporting data is denormalized, there’s always a possibility for it to fall out of sync with the original data stored in separate tables. Scenarios like programmer errors, customer support changes, or even freakish once-in-a-blue-moon events all have the potential of messing with that balance.&lt;/p&gt;

&lt;p&gt;To mitigate those problems, as part of the Rails changes, we’re testing our denormalization code very heavily. We are also running a consistency check once a day to make sure all of those denormalized fields stored have correct data. These two strategies have worked remarkably well for finding problems when they occur.&lt;/p&gt;

&lt;p&gt;This also worked out wonderfully as we transparently rolled out these changes to our customers. Even before we started using the new data in the report queries, we could store and verify the contents, allowing me to hunt down any holes in our logic and ensure the data can be trusted. These steps have also helped us with current development as we &lt;a href=&quot;https://www.getharvest.com/blog/2017/05/introducing-fixed-fee-projects/&quot;&gt;explore new project settings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aside from the logical errors that could happen, we also take another disk space penalty as we widen our large table. With the new primary key and the new columns, our time entries table ballooned by about 25%. But for our data set, this trade off was an easy decision.&lt;/p&gt;

&lt;h2 id=&quot;parting-thoughts&quot;&gt;Parting thoughts&lt;/h2&gt;

&lt;p&gt;I am extremely happy with these results and I hope that this information can help other teams as they examine their own application’s query performance. I believe we made these changes at the right time and I would not have started out our application with either of these techniques. Going forward we’ll have to see whether these approaches still apply or if there are smarter choices we can make, but for now, we can celebrate.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A hypothesis about the number of assertions in a test</title>
   <link href="/blog/2014/12/a-hypothesis-about-the-number-of-assertions-per-test"/>
   <updated>2014-12-12T00:00:00+00:00</updated>
   <id>/blog/2014/12/a-hypothesis-about-the-number-of-assertions-per-test</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Lately at work we have been discussing a testing style that has been named &lt;a href=&quot;http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html&quot;&gt;one assertion per test&lt;/a&gt;. Here is &lt;a href=&quot;http://maxheapsize.com/2011/06/14/one-assert-per-test-really/&quot;&gt;another blog post&lt;/a&gt; describing this style.&lt;/p&gt;

&lt;p&gt;In essence for one-assertion-per-test the goal is to keep all tests focused on one part of the behavior. A couple benefits of this style:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t have to re-run a test multiple times in order to make it pass. If it fails, you can red-green it without another assertion in the same test failing.&lt;/li&gt;
  &lt;li&gt;You can give more descriptive names to the tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I strongly dislike the one-assertion-per-test heuristic, but I do like my tests having a single focus. I’ve even called it “one focus per test” when discussing this with collegues.&lt;/p&gt;

&lt;p&gt;What is interesting about this discussion is not that one style is clearly right and one is clearly wrong (who am I kidding? “one focus per test” all the way baby!). It is that a lot of the discussion keeps circling back to &lt;em&gt;“It’s easier for me to follow …“&lt;/em&gt; or &lt;em&gt;“It’s easier for me to grok…“&lt;/em&gt; or &lt;em&gt;“I can immediately understand a test when …“&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After thinking about it, I have a hypothesis. I think people in the different camps focus on different pieces of code in order to understand something at a glance. Imagine someone showing you a picture of a person for 5 seconds and then taking it away.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/time-to-look/15064231818&quot; title=&quot;2014 - Vancouver - News in Chinatown by Ted McGrath, on Flickr&quot;&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3924/15064231818_6d291253e8_c.jpg&quot; width=&quot;800&quot; height=&quot;347&quot; alt=&quot;2014 - Vancouver - News in Chinatown&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(&lt;a href=&quot;https://www.flickr.com/photos/time-to-look/15064231818&quot;&gt;picture by Ted McGrath&lt;/a&gt; under &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/2.0/&quot;&gt;creative commons license&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some observers might gravitate towards their physical appearance “what colors are they wearing”, “what does their hair look like?”. Others might focus on their face “what mood are they in?” “is their facial expression telling me anything?”. Other observers might even focus on thing behind the person “where are they at?”&lt;/p&gt;

&lt;p&gt;Bringing this back to tests, I put together two versions of a fancy complicated example service called &lt;a href=&quot;https://github.com/zmoazeni/numberwang.rb/blob/master/numberwang_service_spec.rb&quot;&gt;NumberwangService&lt;/a&gt;. It’s too easy to get sucked into trivial examples or overcomplicate the context for a specific example so my code uses the business rules to the gameshow &lt;a href=&quot;https://www.youtube.com/watch?v=qjOZtWZ56lc&quot;&gt;Numberwang&lt;/a&gt;. &lt;em&gt;(To be fair, most internal business rules feels like Numberwang to outsiders)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My hypothesis is that one-assertion-per-test developers tend to focus first on the &lt;strong&gt;test descriptions&lt;/strong&gt;:
&lt;img src=&quot;/uploads/single-assertion-numberwang.png&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and multi-assertions-per-test developers tend to focus first on the &lt;strong&gt;test code&lt;/strong&gt;:
&lt;img src=&quot;/uploads/multi-assertion-numberwang.png&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m not saying that one-assertion developers don’t care about the test body, and multi-assertion developers don’t care about the test description. But I have a hunch that developer eyes gravitate towards points like this when trying to take in and understand multiple tests at once depending on their preferences.&lt;/p&gt;

&lt;p&gt;I know that my habit is to focus on the test code itself and that’s why I take time to make tests readable and understandable. Like cohesive paragraphs on a page.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Why I enjoy writing software at Harvest</title>
   <link href="/blog/2014/11/why-i-enjoy-writing-software-at-harvest"/>
   <updated>2014-11-03T17:04:00+00:00</updated>
   <id>/blog/2014/11/why-i-enjoy-writing-software-at-harvest</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;&lt;em&gt;Originally posted to &lt;a href=&quot;http://techtime.getharvest.com/blog/why-i-enjoy-writing-software-at-harvest&quot;&gt;http://techtime.getharvest.com/blog/why-i-enjoy-writing-software-at-harvest&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I occasionally help out the team by interviewing new candidates. The most common question I have been asked — “What do you enjoy most about working at Harvest?” — is a great question for an interviewee to ask. There are several stock answers that I think most people reach for. You can talk about how much you like the team, the culture, the flexibility, or the customers you help. I appreciate all of these at Harvest, but there are some specific anecdotes that I think really help paint a picture of what it is like to work at Harvest.&lt;/p&gt;

&lt;h2 id=&quot;the-codebase&quot;&gt;The Codebase&lt;/h2&gt;

&lt;p&gt;I enjoy working with our codebase. That sounds shallow since the codebase is just a means to an end: providing a great experience for our customers. However working daily with Harvest’s codebase is the full-time job for myself and the team I work with. If it were painful, that’d be a negative daily experience to weigh against the other benefits. I also firmly believe that our team’s ability to help solve our customer’s needs is directly influenced by the ease at which we can build features and fix problems.&lt;/p&gt;

&lt;p&gt;You should know that Harvest launched in 2005 before Rails had even hit version 1.0 and we have our share of legacy code that has persisted over the years. I joined Harvest over 2 years ago and my experience pretty much amounted to enterprises, startups, and consulting. For the longest time my favorite projects were &lt;a href=&quot;http://en.wikipedia.org/wiki/Greenfield_project&quot;&gt;greenfield&lt;/a&gt;, where the teams could work on the problem at hand with very little regard to legacy code. So why do I enjoy working on a large old app like Harvest? Because it is amazing and inspiring to see it transform and improve over the years.&lt;/p&gt;

&lt;p&gt;It is one thing to launch a project for a client, fix a few bugs, and then move on or throw a ball of hacks together in order to get profitable as soon as possible. It is another world altogether to deploy a feature set, and then continue to improve and polish it as time goes on. We do have our spurts where we will rewrite old code from scratch, and we might even grumble at the previous developer’s short-sighted design choices while we do it (which is funnier when you realize you were the previous developer). But our team recognizes that old code helped get Harvest to where it is today.&lt;/p&gt;

&lt;p&gt;There is a respect, a beauty, and an admiration that comes working long term on a legacy codebase alongside this team.&lt;/p&gt;

&lt;h2 id=&quot;the-team&quot;&gt;The Team&lt;/h2&gt;

&lt;p&gt;The team here at Harvest is critical for our codebase to improve. Working on a legacy codebase with an understaffed crew is definitely unfun. Have you ever accidentally deployed a bug and had to answer a flood of support tickets while you’re trying to figure out a fix and deploy it? Have you ever critically botched the infrastructure and suddenly had to scramble to fix the servers?&lt;/p&gt;

&lt;p&gt;I am grateful for the teams we have here at Harvest. I’m a big fan of our Harvest Experts who genuinely care about solving our customer’s problems and diagnose bug symptoms to pass on to developers. They honestly mean it when they tell our customers to write or call in when they need help.&lt;/p&gt;

&lt;p&gt;I am relieved we have a brilliant and hardworking Operations team that is focused on our infrastructure 24x7 dealing with daily problems ranging from security reports and patches to capacity planning.&lt;/p&gt;

&lt;p&gt;I am thankful for our Product Design team who thinks a lot about the customer’s interface experience. They also work closely with the Development team and adapt if technical limitations are uncovered.&lt;/p&gt;

&lt;p&gt;We have several other roles too, like our Mobile Developers, Quality Assurance, Marketing, External Integrations, and Office Managers that all fit in a unique way to improving our company and product. Because of these roles, I can focus on what I do best.&lt;/p&gt;

&lt;h2 id=&quot;roles-and-communication&quot;&gt;Roles and Communication&lt;/h2&gt;

&lt;p&gt;Now you might get the impression that each of these roles are rigidly defined and add to office bureaucracy; Developers need to submit “Database Change Requests” to Ops and everyone is busy filling out TPS reports. Not at all.&lt;/p&gt;

&lt;p&gt;Each one of these teams fluidly communicates with other teams in order to solve the problems at hand. Developers are asked to take over certain support tickets. Ops members are invited to a technical design discussion. Experts are asked about common customer problems while we redesign an existing feature. Developers let Experts know beforehand when we’re going to launch features so they can field support issues with current information.&lt;/p&gt;

&lt;p&gt;There isn’t any central authority that dictates these processes. Each team puts together their process and if things go poorly, they talk about it and improve it. Sometimes that requires talking and changing a process between teams. We do have a few people who float between teams that can view issues in the aggregate and suggest improvements.&lt;/p&gt;

&lt;h2 id=&quot;empowerment&quot;&gt;Empowerment&lt;/h2&gt;

&lt;p&gt;A legacy codebase would never improve if the team working on it didn’t have the authority to make big changes. The freedom to improve areas is a wonderful advantage. But with that advantage comes responsibility: we still have to prioritize features and get a general consensus among the immediate team.&lt;/p&gt;

&lt;p&gt;I’ve worked in some places where the unspoken rule was “It ain’t broken enough, so don’t fix it” and that is not the case at Harvest. Most of us have our own personal short list of areas we want to make better and have the flexibility to squeeze wins here and there within a normal work week.&lt;/p&gt;

&lt;p&gt;The team submits and vets bigger feature changes and rewrites, not a Product Manager or a Project Manager, and those projects are prioritized alongside everything else.&lt;/p&gt;

&lt;h2 id=&quot;a-direct-influence&quot;&gt;A Direct Influence&lt;/h2&gt;

&lt;p&gt;The direct influence of everyone on our team on our customers means a lot to me. I like that my work positively affects contractors, designers, business owners, and many others. Our customer’s needs are very real and have serious impacts on their livelihood.&lt;/p&gt;

&lt;p&gt;Some of our customers are independent with various distractions that pull at them. It’s very satisfying to know that my work can improve their day-to-day life. Our team has a responsibility to keep a stable infrastructure with as few bugs as possible because our screw-ups can cause a big disruption for our customers.&lt;/p&gt;

&lt;h2 id=&quot;a-glimpse&quot;&gt;A Glimpse&lt;/h2&gt;

&lt;p&gt;A recent meeting inspired me to write this post. My team is working with another team on an integration that have some particularly interesting (and fun!) performance implications.&lt;/p&gt;

&lt;p&gt;We met a few times to try and hammer out how one piece of code should talk to another. These meetings have included Design and Ops to help weigh in with different perspectives. Our last meeting between the teams had five developers focusing on a specific technical issue.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We talked about a few straightforward solutions and we agreed on one along with some metrics.&lt;/li&gt;
  &lt;li&gt;As we learn more, we agreed we might need to bring design back into the discussion in order to figure out some user interface compromises because of performance.&lt;/li&gt;
  &lt;li&gt;We agreed we need to take a serious look at the root cause of the performance issue and prioritize that when we can.&lt;/li&gt;
  &lt;li&gt;We ended the meeting with “Let’s all expect to rewrite parts of this we roll it out 100%. We can consider ourselves lucky if it makes it to production as-is.” That got a few chuckles but everyone nodded in agreement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a great glimpse of what it is like to work here. We know we may have to change as we go. The team is not afraid of being wrong and has the courage to move forward with the information we have. Multiple areas can weigh in with input. The teams are not shutting down the conversation by pointing fingers or huffing “that’s not my problem.”&lt;/p&gt;

&lt;h2 id=&quot;a-coworkers-comment&quot;&gt;A Coworker’s Comment&lt;/h2&gt;

&lt;p&gt;I asked my coworkers to review a draft before I published this. &lt;a href=&quot;https://www.getharvest.com/about/meet-the-team#andrew-dunkman&quot;&gt;Andrew&lt;/a&gt; said parts of this post resonated with him. I liked his comment so much that I asked his permission to end with it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I love watching &lt;a href=&quot;http://www.thisoldhouse.com/toh/&quot;&gt;This Old House&lt;/a&gt; — it’s one of my weekend guilty pleasures. I keep coming back to the show because of the amount of work they put into a project house — it’s incredible. The current project has a closed-in back yard, so when the project called for replacing three stone walls, they had to disassemble the wall and carry it out one wheelbarrow at a time, through the house, to a dumpster on the street.&lt;/p&gt;

  &lt;p&gt;They care for the house. But it’s not just care — it’s a kind of love. My mother used to tell me, “no matter what you do, you’ll be our son, and we love you for that.” I like to think of the craftspeople on This Old House that way — “No matter what kind of mold and crumbling masonry we find, you’ll always be our project house, and we’ll make it right.”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Code Reviews at Harvest</title>
   <link href="/blog/2014/10/code-reviews-at-harvest"/>
   <updated>2014-10-02T15:29:02+00:00</updated>
   <id>/blog/2014/10/code-reviews-at-harvest</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;&lt;em&gt;Originally posted to &lt;a href=&quot;http://techtime.getharvest.com/blog/code-reviews-at-harvest&quot;&gt;http://techtime.getharvest.com/blog/code-reviews-at-harvest&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s face it — code reviews can be tough. Even if your team fully adheres to a certain &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide&quot;&gt;style guide&lt;/a&gt;, programming is so subjective that smart people can argue great points on conflicting approaches.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot;&gt;GitHub Pull Requests&lt;/a&gt; heavily at Harvest and we require code reviews for everything meaningful that goes into production. Here’re a few guidelines that we’ve developed for reviewing each other’s changes so we can stay productive and focused on what’s important — launching code.&lt;/p&gt;

&lt;h2 id=&quot;our-current-process&quot;&gt;Our current process&lt;/h2&gt;

&lt;p&gt;Every company has a different deployment process, but here at Harvest it looks a little something like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We discuss what needs to be built, changed, or fixed.&lt;/li&gt;
  &lt;li&gt;A developer/designer creates a branch off of master.&lt;/li&gt;
  &lt;li&gt;They work on their branch. When it’s complete they push it up to GitHub and create a Pull Request tagging an appropriate person or team to review it.&lt;/li&gt;
  &lt;li&gt;One or more tagged people from that team will review the code and give a +1 when they feel it’s ready to be deployed.&lt;/li&gt;
  &lt;li&gt;The original submitter will then merge it into master and deploy it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Multiple posts could be written about each of these steps. However I’m only going to talk about #3 and #4.&lt;/p&gt;

&lt;p&gt;We use code reviews at Harvest to help communicate with the team what’s going into production, to help each other learn new tricks and techniques as things evolve, and to point out specific areas to investigate that we may unintentionally break.&lt;/p&gt;

&lt;h2 id=&quot;if-it-fixes-a-serious-bug-just-let-it-go&quot;&gt;If it fixes a serious bug, just let it go&lt;/h2&gt;

&lt;p&gt;We might disagree on approach, but if there’s a serious issue in Harvest that’s affecting a customer, and someone on the team has a &lt;a href=&quot;/blog/find-bugs-once-and-the-joy-of-bug-fixing&quot;&gt;fix for it&lt;/a&gt;, we will always let it ship. We can always circle back and fix it better or more thoroughly later.&lt;/p&gt;

&lt;h2 id=&quot;know-whats-blocking-your-code&quot;&gt;Know what’s blocking your code&lt;/h2&gt;

&lt;p&gt;Code reviews can feel unproductive because they don’t have a clear goal. We’ve put together a survey we call &lt;a href=&quot;http://harvesthq.github.io/fias/?v1=1&amp;amp;v2=1&amp;amp;v3=1&quot;&gt;FIAS (the Filler Impact Assessment Survey)&lt;/a&gt;, a tongue-in-cheek acronym named after &lt;a href=&quot;https://www.getharvest.com/about/meet-the-team#patrick-filler&quot;&gt;Patrick Filler&lt;/a&gt;, the Harvester who proposed the idea.&lt;/p&gt;

&lt;p&gt;The idea is simple: take an educated guess at ranking three questions on a scale of one to ten:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How much of the app is affected?&lt;/li&gt;
  &lt;li&gt;How much of this change is mysterious to you?&lt;/li&gt;
  &lt;li&gt;How easy is it for you to imagine this performs in an unexpected way after deployment?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then add up the scores for each question.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the score is less than fifteen, you only need one person to give you a +1.&lt;/li&gt;
  &lt;li&gt;If the score is fifteen to twenty, you need two people to give you a +1.&lt;/li&gt;
  &lt;li&gt;If the score is over twenty, you need two people and full QA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;QA is different for each team. Harvest has staging environments that mirror production and we have scripts for each section that we manually test.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This isn’t perfect and the results may not make sense for other teams. For example, another team may want three people to +1 or always QA above ten points. However, the point is that, when a Pull Request begins review, we have a clear idea what it will take to launch it to production.&lt;/p&gt;

&lt;p&gt;We also don’t always follow the FIAS. For example, even if we only need one +1, the submitter may still override the FIAS and ask for two to three +1s because they know their changes involve a particularly tough part of the codebase.&lt;/p&gt;

&lt;p&gt;Now that we have a set goal, we can work backwards. If some of the changes makes a reviewer uncomfortable, can that part be segmented out and the rest launched instead? Can this branch be merged even if there’s a heated discussion over using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt; vs a single clear object?&lt;/p&gt;

&lt;p&gt;With a simple process, we’ve removed the ambiguity that most code reviews start with.&lt;/p&gt;

&lt;h2 id=&quot;communicate-clearly-to-reviewers-whats-going-on&quot;&gt;Communicate clearly to reviewers what’s going on&lt;/h2&gt;

&lt;p&gt;FIAS is a great tool to get a general sense of how large (and risky) a change is to you — but it isn’t always the best tool for communicating to your reviewers what the change actually entails. Sometimes, &lt;a href=&quot;http://www.schneems.com/post/41104255619/use-gifs-in-your-pull-request-for-good-not-evil/&quot;&gt;GIFs&lt;/a&gt; or annotated before and after images (made with tools like &lt;a href=&quot;http://monosnap.com/welcome&quot;&gt;Monosnap&lt;/a&gt;) can be more effective. Pre-commenting certain areas in your own Pull Request is also helpful: “I know this line seems unrelated, but it is because…”&lt;/p&gt;

&lt;p&gt;Clearly communicating the change starts the code review on the right foot. The submitter may have invested days working on a change, but the people reviewing it have not.&lt;/p&gt;

&lt;h2 id=&quot;clarify-blocking-comments&quot;&gt;Clarify blocking comments&lt;/h2&gt;

&lt;p&gt;Not every comment or question has to be resolved. Text doesn’t always convey emotion, and it’s easy to misread someone’s intent. It’s perfectly fine to ask a reviewer, “Is this a blocking issue?” Often it isn’t, or it can be handled separately.&lt;/p&gt;

&lt;p&gt;Pull Requests can also end up being a lightning rod for debate. Discussions among the team can continue on a Pull Request, but they can also be moved elsewhere — to a separate issue, internal tool, or even a meeting.&lt;/p&gt;

&lt;p&gt;Our reviewers will normally prefix comments with “[NB]” for non-blocking comments: “[NB] This works, but here’s a quick snippet that’s a little more clear”. A simple prefix like that can help speed along code reviews.&lt;/p&gt;

&lt;h2 id=&quot;face-to-face-meetings&quot;&gt;Face-to-face meetings&lt;/h2&gt;

&lt;p&gt;We often raise a white flag and ask for an impromptu face-to-face meeting or a quick chat, usually by spinning up a &lt;a href=&quot;https://www.google.com/+/learnmore/hangouts/&quot;&gt;Google Hangout&lt;/a&gt; or conversation in &lt;a href=&quot;https://www.hipchat.com/&quot;&gt;HipChat&lt;/a&gt;. This seems like an obvious tip. However recognizing the need for these meetings can be tricky. If two people have posted back and forth at least once on the same topic, it will likely be easier to just hash it out face-to-face. If you find yourself writing two paragraphs, some of your concerns will likely get lost. You may be able to convey your thoughts better over audio.&lt;/p&gt;

&lt;p&gt;It’s nice to see a comment history of how decisions were made. However, you can still accomplish this by posting a quick recap of what was decided in the meeting.&lt;/p&gt;

&lt;h2 id=&quot;dont-limit-the-number-of-reviewers&quot;&gt;Don’t limit the number of reviewers&lt;/h2&gt;

&lt;p&gt;Everyone on the team pitches in with code reviews and we don’t have official reviewers here at Harvest. We may purposefully ping someone who we know has had a lot of experience in a particular area, but we never wait on one person to go through all the reviews.&lt;/p&gt;

&lt;p&gt;This becomes a bigger deal as the team grows. With an application as large as Harvest, it’s extremely difficult to keep everything in your head. And even if you do feel good about a certain area, it will likely change over time as other people help out with maintenance.&lt;/p&gt;

&lt;p&gt;We also notify people to give them a heads-up without expecting them to review the pull request. We do this by prefixing “/cc” before their name  “/cc @zmoazeni this might affect your work on reports”.&lt;/p&gt;

&lt;h2 id=&quot;not-a-perfect-process&quot;&gt;Not a perfect process&lt;/h2&gt;

&lt;p&gt;We don’t have any delusions  that our process is perfect. However all of these points help speed along our code reviews. Taking some of these tips and morphing it to fit your organization may help out your team too — or, if you think your process could help out our team, write up your process and &lt;a href=&quot;mailto:zach@getharvest.com&quot;&gt;send us a link&lt;/a&gt;! We’re always looking to improve.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple Memoization in Scala</title>
   <link href="/blog/2014/01/simple-memoization-in-scala"/>
   <updated>2014-01-02T00:00:00+00:00</updated>
   <id>/blog/2014/01/simple-memoization-in-scala</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;In Ruby, it’s common to use instance variables and conditional assignment to
to concisely &lt;a href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;memoize&lt;/a&gt; expensive
operations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemoizeSomething&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;somethingExpensive&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@somethingExpensive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;in here, going to sleep to calculate an 'expensive' operation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;the result: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MemoizeSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;somethingExpensive&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;the result: foo&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You could reuse the same of strategy of detecting &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; and conditionally
evaluating the result. However Scala has lazy evaluation built in. So you could
write the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemoizeSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somethingExpensive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in here, going to sleep to calculate an 'expensive' operation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the result: $x&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemoizeSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;somethingExpensive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;MemoizeSomething&lt;/code&gt; is initialized, it won’t evaluate &lt;code class=&quot;highlighter-rouge&quot;&gt;somethingExpensive&lt;/code&gt;
right away, but the first time that variable is requested it will fully evaluate
it.&lt;/p&gt;

&lt;p&gt;If you’re not a fan of the closure above, you could also use a separate method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemoizeSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somethingExpensive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calcSomethingExpensive&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calcSomethingExpensive&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in here, going to sleep to calculate an 'expensive' operation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the result: $x&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemoizeSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;somethingExpensive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Detecting Scala Extension Classes at Runtime</title>
   <link href="/blog/2013/12/detecting-scala-extension-classes-at-runtime"/>
   <updated>2013-12-29T00:00:00+00:00</updated>
   <id>/blog/2013/12/detecting-scala-extension-classes-at-runtime</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Years ago, when I left Java for Ruby and Rails, I found Rails’s opinions on &lt;a href=&quot;http://en.wikipedia.org/wiki/Convention_over_configuration&quot;&gt;convention over configuration&lt;/a&gt; very refreshing. I was tired of all the XML files needed for even the simplest Java architectures.&lt;/p&gt;

&lt;p&gt;If you ignore the overengineered uses of XML, there’s still something lacking with Java compared to Ruby when writing extendable software. Technically both languages are interpretted, however Java’s only entry point is the initial &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; method that runs at the begnning. Constrast that with Ruby, where every file that is loaded has the potential for changing the context of the runtime.&lt;/p&gt;

&lt;p&gt;Some developers are revolted at Ruby’s flexible nature, and while poorly written code can get squirrely and difficult to understand, I find that open execution context very useful in practice.&lt;/p&gt;

&lt;p&gt;After coming back to the JVM and working with Scala, I was beginning to miss this feature from Ruby. Scala has an advantage over Java with its support for interpretting uncompiled files, but loading other uncompiled Scala files outside the REPL is difficult.&lt;/p&gt;

&lt;p&gt;Java has some powerful reflection libraries though, both built into the standard library and without. One of these libraries I came across is &lt;a href=&quot;https://github.com/ronmamo/reflections&quot;&gt;reflections&lt;/a&gt; which provides enough tools to make some magic happen. You can check out some &lt;a href=&quot;https://github.com/zmoazeni/reflections-example&quot;&gt;example reflection code I put together&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The technique is simple.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First we define an &lt;a href=&quot;https://github.com/zmoazeni/reflections-example/blob/master/reflections-base/src/main/scala/org/reflections_example/extension/BaseExtension.scala&quot;&gt;base interface&lt;/a&gt; that becomes an anchor so we can identify extension classes. This example uses a Scala trait, but you could use a Java interface. &lt;em&gt;In my example I also scope all extensions to a particular package for better performance.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;We can then separately compile &lt;a href=&quot;https://github.com/zmoazeni/reflections-example/blob/master/reflections-extension/src/main/scala/org/reflections_example/extension/MyFirstExtension.scala&quot;&gt;a couple&lt;/a&gt; &lt;a href=&quot;https://github.com/zmoazeni/reflections-example/blob/master/reflections-extension/src/main/scala/org/reflections_example/extension/MySecondExtension.scala&quot;&gt;extension classes&lt;/a&gt; against our base code that implement that interface.&lt;/li&gt;
  &lt;li&gt;Now back in our &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; method, we can use the reflections library to &lt;a href=&quot;https://github.com/zmoazeni/reflections-example/blob/master/reflections-base/src/main/scala/org/reflections_example/Main.scala#L9-L13&quot;&gt;find any extensions at runtime&lt;/a&gt;, instantiate them, and run a common method that we define. This allows our extensions to bootstrap themselves however they need. For example, we could set up &lt;a href=&quot;http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&quot;&gt;pubsub&lt;/a&gt; in our original code to allow the extensions to modify the program behavior.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it. With this pattern you can dynamically extend a program at runtime just by dropping a jar in the classpath.&lt;/p&gt;

&lt;p&gt;I suspect the same developers that abhor Ruby’s per-required-file entry points that I described above will also dislike this strategy. But this just opens up the entry points for other code at runtime. You still have to build a design that lets extensions do anything meaningful.&lt;/p&gt;

&lt;p&gt;As a concrete application, I’m considering using this for a rewrite of &lt;a href=&quot;/blog/2013/04/csscss/&quot;&gt;csscss&lt;/a&gt;. With this design, I can write a base progam that only deals with CSS, but open up filetype recognition for extensions. Then other developers could write extensions for precompiling &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;, &lt;a href=&quot;http://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt; or any other meta CSS language into CSS. And to enable one of those precompilers, a user would only have to download a jar for that extension and put it into a known directory.&lt;/p&gt;

&lt;p&gt;No XML files. No configuration. It just works.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala parser performance with v2.10.x</title>
   <link href="/blog/2013/12/scala-v2-10-parser-performance"/>
   <updated>2013-12-28T00:00:00+00:00</updated>
   <id>/blog/2013/12/scala-v2-10-parser-performance</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I have been tinkering with rewriting &lt;a href=&quot;/blog/2013/04/csscss/&quot;&gt;csscss&lt;/a&gt; in scala and have really enjoyed the language. Especially after working in Haskell. I noticed however that after upgrading my local java version to the latest v1.7 &lt;em&gt;(currently 1.7 update 45)&lt;/em&gt; my parsing performance tanked.&lt;/p&gt;

&lt;p&gt;My toy parser is regex based, and I asked on the mailing list if there have been any recent regex changes. I was pointed to the following links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6924259&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6924259&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://java-performance.info/changes-to-string-java-1-7-0_06/&quot;&gt;http://java-performance.info/changes-to-string-java-1-7-0_06/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.scala-lang.org/browse/SI-7710&quot;&gt;https://issues.scala-lang.org/browse/SI-7710&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Turns out in 1.7 update 6, the semantics of &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; changed:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;String.substring created a String, which shared an internal char[] value with an original String, which allowed you:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;To save some memory by sharing character data&lt;/li&gt;
    &lt;li&gt;To run String.substring in a constant time ( O(1) )&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;At the same time such feature was a source of a possible memory leak…&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://java-performance.info/changes-to-string-java-1-7-0_06/&quot;&gt;http://java-performance.info/changes-to-string-java-1-7-0_06/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem comes up when parsing in scala because &lt;code class=&quot;highlighter-rouge&quot;&gt;subSequence&lt;/code&gt; (which depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;substring&lt;/code&gt;) is used heavily. So every parsing step would require at least O(n) of copying an array to a new array when creating a String.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://issues.scala-lang.org/browse/SI-7710&quot;&gt;scala bug&lt;/a&gt;, the reporter mentioned writing a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;CharSequence&lt;/code&gt; that behaved the way same &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; used to to reclaim the performance.&lt;/p&gt;

&lt;p&gt;Here is a snippet that did the trick for me:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.CharSequence&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastCharSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startBounds&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endBounds&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endBounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startBounds&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startBounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$boundsInfo index: $index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastCharSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startBounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startBounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$boundsInfo start: $start, end $end&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startBounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boundsInfo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;current: (startBounds: $startBounds, endBounds: $endBounds, length: $length, chars length: ${chars.length})&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of parsing a String, you can wrap this around the String and parse that to reclaim performance.&lt;/p&gt;

&lt;p&gt;This strategy may be &lt;a href=&quot;https://issues.scala-lang.org/browse/SI-7710&quot;&gt;brought into scala v2.11&lt;/a&gt;, which should be released soon. But until then, you can use something similar.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why csscss doesn't remove duplication for you</title>
   <link href="/blog/2013/04/why-csscss-doesnt-remove-duplication-for-you"/>
   <updated>2013-04-27T00:00:00+00:00</updated>
   <id>/blog/2013/04/why-csscss-doesnt-remove-duplication-for-you</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;After I released &lt;a href=&quot;http://zmoazeni.github.io/csscss/&quot;&gt;csscss&lt;/a&gt;, I’ve been asked numerous times:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why doesn’t csscss remove duplication for me?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is a fair question. It is easy to look at csscss and ask why it
isn’t more like a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Minification_(programming\)&quot;&gt;minifier&lt;/a&gt;
that a developer can just run before deploying updates. In fact
&lt;a href=&quot;http://css.github.io/csso/&quot;&gt;CSSO&lt;/a&gt; and
&lt;a href=&quot;https://github.com/begriffs/css-ratiocinator&quot;&gt;css-ractionator&lt;/a&gt; are
projects that do this exact thing.&lt;/p&gt;

&lt;p&gt;So why didn’t I build it that way?&lt;/p&gt;

&lt;h2 id=&quot;csscss-forces-me-consider-my-code-design&quot;&gt;csscss forces me consider my (code) design&lt;/h2&gt;

&lt;p&gt;I built csscss as a tool to help a developer write smarter CSS.
Duplication isn’t all bad, but we often write duplicated CSS
unknowingly. When I see duplicated CSS, it forces me to think about my
rules and structure. It forces me to ask myself several questions about
my code.&lt;/p&gt;

&lt;p&gt;“Is this necessary?”&lt;/p&gt;

&lt;p&gt;“Have I already defined a structure for this? Do I need to extend
existing structures?”&lt;/p&gt;

&lt;p&gt;“Is there a better way to define the same rules?”&lt;/p&gt;

&lt;p&gt;“Can I leverage other CSS tools to better structure these styles?
(&lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;, etc)”&lt;/p&gt;

&lt;p&gt;All of these answers reduce duplication, but more importantly, they
force me to consider the design of my code. And I don’t think there is a
single algorithm that satisfies all cases.&lt;/p&gt;

&lt;p&gt;Now you can obviously do this without an automated tool. And it is easy
for a small number of rules. However as your site/application grows it is
extremely difficult to continue this mental juggling.&lt;/p&gt;

&lt;p&gt;I like to think of csscss as a tool that helps &lt;strong&gt;extend my intuition&lt;/strong&gt;,
not replace it.&lt;/p&gt;

&lt;h2 id=&quot;generated-code-is-harder-to-debug&quot;&gt;Generated code is harder to debug&lt;/h2&gt;

&lt;p&gt;If csscss generated new duplication-free code, all I am doing is punting
work for later. Which usually comes up when I need to debug my styles
from the browser. If the generated output is substantially different
than the original source, it makes my job harder to fix my problems.&lt;/p&gt;

&lt;p&gt;I have a similar problem with &lt;a href=&quot;http://coffeescript.org/&quot;&gt;coffeescript&lt;/a&gt;,
though I still enjoy using it. The coffeescript I write and the
javascript I debug are different. Luckily, in that case I can follow the
flow enough to jump back to coffeescript to fix my bugs.&lt;/p&gt;

&lt;p&gt;However the point of csscss is not to optimize code, it is to help
inform you about areas improvement. If csscss did this for you, I expect
the gulf between original source and browser CSS to be rather large.&lt;/p&gt;

&lt;h2 id=&quot;improving-the-css-landscape&quot;&gt;Improving the CSS landscape&lt;/h2&gt;

&lt;p&gt;None of this is a knock against other developers working on the same
problem. In fact, I think different perspectives and trial/error in this
field can only be a good thing. CSS has been around for over a decade
and it is surprising to me that we don’t have more tools. So I commend
anyone spending time to contribute. csscss is my contribution based on
my opinions.&lt;/p&gt;

&lt;p&gt;Here are some others tools that people have mentioned since I released
csscss.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://css.github.io/csso/&quot;&gt;CSSO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/begriffs/css-ratiocinator&quot;&gt;css-ractionator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/rework&quot;&gt;rework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geuis/helium-css&quot;&gt;helium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>csscss</title>
   <link href="/blog/2013/04/csscss"/>
   <updated>2013-04-25T00:00:00+00:00</updated>
   <id>/blog/2013/04/csscss</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;About eight months ago, I had an idea for a potential tool that could
help refactor
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cascading_Style_Sheets&quot;&gt;CSS&lt;/a&gt;.
I wondered, “Why aren’t there many (any?) CSS static code analyzers
out there?”&lt;/p&gt;

&lt;p&gt;I mean when you think about it, it is a little crazy. CSS is a pretty
simple language and it has been around for over 15 years. The
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/CSS/Getting_Started/Selectors&quot;&gt;selectors&lt;/a&gt;
can get a little intense and there is a laundry list of properties. But
the core syntax of CSS is pretty straightforward.&lt;/p&gt;

&lt;p&gt;The premise was simple. In all other languages, I work at writing
&lt;a href=&quot;http://en.wikipedia.org/wiki/Don't_repeat_yourself&quot;&gt;DRY&lt;/a&gt; code. So why
can’t something inform me when I’m repeating the same declarations over
and over? Better yet, I wouldn’t need a browser to figure this out. I
should have all information immediately available in the source code.&lt;/p&gt;

&lt;p&gt;I had this idea eight months ago, and I am proud that I had the
fortitude to stick with the project and launch it. So here it is.&lt;/p&gt;

&lt;p&gt;World, please meet &lt;a href=&quot;http://zmoazeni.github.io/csscss/&quot;&gt;csscss&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Your Identity ≠ Your Code</title>
   <link href="/blog/2013/04/your-identity-your-code"/>
   <updated>2013-04-24T00:00:00+00:00</updated>
   <id>/blog/2013/04/your-identity-your-code</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;&lt;em&gt;This was originally posted on &lt;a href=&quot;http://collectiveidea.com/blog/archives/2012/03/16/your-identity-your-code/&quot;&gt;March 16,
2012&lt;/a&gt; when I worked with
CollectiveIdea&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This morning I started my day seeing this in my twitter feed:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;Your identity ≠ Your job&lt;/p&gt;&amp;mdash; Kyle Steed (@kylesteed) &lt;a href=&quot;https://twitter.com/kylesteed/status/180651842919858176&quot;&gt;March 16, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;I’ve been thinking about this idea a lot lately. And I think it’s a trap that developers (myself included) easily fall into. To make this idea a little more specific to developers: Your identity ≠ Your code.&lt;/p&gt;

&lt;p&gt;As developers, we like to solve problems and get a kick out of that feeling that seemingly comes out of nowhere: “Yes! I solved it. I am all that is awesome!” (maybe I’m the only one who says that out loud). But at the same time we attach ourselves tightly to our code and will equate criticisms of our code as criticisms of us as a person. And lets be honest, while we all want to improve, it is difficult not to equate “this could be better” with “you should have been smarter”.&lt;/p&gt;

&lt;p&gt;I don’t think it is entirely due to criticism either. There are developers that I look up to, and I still get geeked out when I’m lucky enough to talk with them. For most of my geek-heroes, I also see prominent projects that they are part of, and it is difficult to separate “they are awesome because they wrote x”. I know when I first began, I cared a lot more about how people would perceive the code I wrote rather than how well it solved the problem at hand. It is more important to view your web heros as people who ship working software. If you think they are the authority on how software should be written, you’re in for an awakening.&lt;/p&gt;

&lt;p&gt;This idea also affects open source. It is rare to see a young developer submit bug fixes to existing projects. Most developers have the talent to fix outstanding issues, but don’t due to the fear of rejection and criticism. And again it isn’t the specific criticisms of the code they write, which in all likelihood would only accelerate their learning, it’s hearing those criticisms and taking it personal.
It is hard not to take these criticisms personal, especially when you read someone else’s code and say “What the hell was this fella thinking? That moron.” Believe it or not, I’ve caught myself saying that only to run a &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; and discover I was the “moron” who wrote the code. Early in my career, after uttering something similar, I was told by another developer “Criticize the code, not the developer.” And that has stuck, though at times I have to remind myself.&lt;/p&gt;

&lt;p&gt;We will look at a piece of code and think “This is God-awful. This dev is terrible”. And it’s important to remember there is a lot more context around why code is written a certain way. The original developer’s experience does have an effect, but think back to the hacks you have written and why they were necessary. Even if it can be written better, you’re not doing anyone favors by slamming the dev.&lt;/p&gt;

&lt;p&gt;But then we wonder why we get defensive when we hear people sharing ideas about the code we write. “Yeah, they’re saying it politely, but I know what they’re really thinking.”&lt;/p&gt;

&lt;p&gt;Cut the ego. Stop equating bad code with bad developers. Stop equating code criticisms as a knock against you as a person. We could use more people submitting ideas and less animosity around existing code.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ActiveResource XML bug fix for Rails 3.0.19</title>
   <link href="/blog/2013/01/activeresource-xml-bug-fix-for-rails-3-dot-0-19"/>
   <updated>2013-01-10T15:24:49+00:00</updated>
   <id>/blog/2013/01/activeresource-xml-bug-fix-for-rails-3-dot-0-19</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;&lt;em&gt;Originally posted to &lt;a href=&quot;http://techtime.getharvest.com/blog/activeresource-xml-bug-fix-for-rails-3-dot-0-19&quot;&gt;http://techtime.getharvest.com/blog/activeresource-xml-bug-fix-for-rails-3-dot-0-19&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The past two weeks have been abuzz with security patches for Rails. &lt;a href=&quot;http://weblog.rubyonrails.org/2013/1/8/Rails-3-2-11-3-1-10-3-0-19-and-2-3-15-have-been-released/&quot;&gt;Yesterday’s in particular&lt;/a&gt; is quite serious, and if you haven’t upgraded yet, you really should.&lt;/p&gt;

&lt;p&gt;This morning, we noticed an issue with a few of our applications that are still running Rails v3.0.x. There is currently a bug for security-patched Rails v3.0 applications serving XML data to ActiveResource consumers (think of a typical Rails XML API).&lt;/p&gt;

&lt;p&gt;This bug was noticed &lt;a href=&quot;https://github.com/rails/rails/pull/492&quot;&gt;2 years ago&lt;/a&gt; by &lt;a href=&quot;https://github.com/jaw6&quot;&gt;jaw6&lt;/a&gt; and his fix was committed to Rails v3.2 and v3.1, but not v3.0. This wasn’t an issue until yesterday’s security upgrade.&lt;/p&gt;

&lt;p&gt;Now if the latest version of ActiveResource requests XML data from a Rails v3.0 server, they may raise an odd error &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash::DisallowedType: Disallowed type attribute: &quot;yaml&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We have just had a &lt;a href=&quot;https://github.com/rails/rails/pull/8853&quot;&gt;pull request&lt;/a&gt; merged into Rails that will fix this issue in v3.0.20 and should be released soon. Until then, if you need to apply this immediately you can have Bundler use this code directly from GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
# In your Gemfile
gem &quot;rails&quot;, :git =&amp;gt; 'https://github.com/rails/rails.git', :branch =&amp;gt; '3-0-stable'
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>My Thoughts on Refinements</title>
   <link href="/blog/2012/11/my-thoughts-on-refinements"/>
   <updated>2012-11-20T04:37:26+00:00</updated>
   <id>/blog/2012/11/my-thoughts-on-refinements</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I have followed the various Ruby 2.0 refinements discussion for a little
while now. There is certainly a lot of talk in the air for and against
the inclusion of this feature. For those tuning in, here are some
notable links to get you up to speed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/a_matsuda/ruby-2-dot-0-on-rails&quot;&gt;A presentation by Akira Matsuda at RubyConf
2012&lt;/a&gt;
introducing refinements along with other interesting new Ruby 2.0
(potential) features.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bugs.ruby-lang.org/issues/4085&quot;&gt;A thorough
discussion&lt;/a&gt; by Ruby runtime
developers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.confreaks.com/videos/1278-rubyconf2012-toward-a-design-for-ruby&quot;&gt;Another RubyConf 2012
talk&lt;/a&gt;
by Brian Ford a prominent &lt;a href=&quot;http://rubini.us/&quot;&gt;Rubinius&lt;/a&gt; developer.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.headius.com/2012/11/refining-ruby.html&quot;&gt;A
blog post&lt;/a&gt; by
Charles Oliver Nutter a prominent &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt; developer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to start off by saying, I have a ton of respect for the
incredible work all developers have put into making my job a reality.
The community wouldn’t be where it is without all your hard work and
sweat. And my career certainly depends on the fruits of your labor.
Thank you.&lt;/p&gt;

&lt;p&gt;There is an interesting mix of pros and cons for the inclusion of
refinements in Ruby 2.0. I’m going to distil what I’ve read and my
comments on the matter.&lt;/p&gt;

&lt;h2 id=&quot;current-discussions&quot;&gt;Current discussions&lt;/h2&gt;

&lt;h3 id=&quot;implementation-difficulties-within-mrijrubyrubiniusother&quot;&gt;Implementation difficulties within MRI/JRuby/Rubinius/other&lt;/h3&gt;

&lt;p&gt;I’m just not qualified to weigh in on this area. I understand that there
are some (many?) challenges in implementing this fully without breaking
the &lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;principal of least
surprise&lt;/a&gt;
for developers. That may or may not sway everything else. It should
certainly not be overlooked, but this isn’t a scenario where you have
people proposing code without writing it. Runtime developers are
currently debating the feasibility implementation, and it does look
split.&lt;/p&gt;

&lt;h3 id=&quot;crazy-use-cases&quot;&gt;Crazy use cases&lt;/h3&gt;

&lt;p&gt;Many are cited on &lt;a href=&quot;http://blog.headius.com/2012/11/refining-ruby.html&quot;&gt;Charles’
post&lt;/a&gt; such as:&lt;/p&gt;

&lt;p&gt;What does the following do?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Quux&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up_and_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Josh Ballanco’s example, also from Charles’s post where&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“the following code only refines the “bar” method, not the “foo”
method.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Yummy&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;camelize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will error&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringCamelize&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;camelize&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I strongly dislike this argument. In complete fairness, you have no idea
what &lt;code class=&quot;highlighter-rouge&quot;&gt;String#upcase&lt;/code&gt; is going to do. Someone before the call may or may
not have overriden the method. It could be
&lt;a href=&quot;http://apidock.com/rails/ActiveSupport/CoreExtensions/Module/alias_method_chain&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias_method_chain'ed&lt;/code&gt;&lt;/a&gt;
to email my grandmother stock quotes upon invocation. No one knows. But
we still love Ruby, we still get work done, and we still ship code.&lt;/p&gt;

&lt;p&gt;Thinking of obtuse edgecases on the nastiness or confusion this could
cause does not dismiss the potential possibilities. My initial reaction,
and I think this is shared with many developers, is “Wow, this could
really clean up some global-level monkey patching.” That doesn’t mean it
will be used only for the forces of good.&lt;/p&gt;

&lt;p&gt;Myron &lt;a href=&quot;http://blog.headius.com/2012/11/refining-ruby.html?showComment=1353368146551#c3690449280229458677&quot;&gt;commented with some
guidelines&lt;/a&gt;
he uses when using monkey patching (which I think are great). But why
wouldn’t the same apply to refinements?&lt;/p&gt;

&lt;p&gt;Saying that refinements could lead to dangerous and unusuable code does
not dimiss the potential benefits of an incredibly flexible feature.
Describe some of the existing features to a non-Ruby developer and watch
their face either light up in possibility or scowl in disbelief. Like
re-opening classes&lt;/p&gt;

&lt;h3 id=&quot;whats-wrong-with-monkey-patching&quot;&gt;What’s wrong with monkey patching?&lt;/h3&gt;

&lt;p&gt;Brian Ford has asked this many times, and I don’t think this is a great
question to lead to the dismissal of refinements. Monkey patching is
global and refinements are local to the call stack. I have not seen many
great arguments won based on the fact that we can accomplish the same
behavior through global means.&lt;/p&gt;

&lt;h2 id=&quot;things-we-should-be-discussing&quot;&gt;Things we should be discussing&lt;/h2&gt;

&lt;p&gt;Aside from language-level implementation details which some language
developers seem to think isn’t a problem and others do, I don’t think
the many of the current questions and discussions are productive. These
are the topics I would like to hear discussed.&lt;/p&gt;

&lt;h3 id=&quot;is-ruby-too-mature-to-include-something-so-experimental&quot;&gt;Is Ruby too mature to include something so experimental?&lt;/h3&gt;

&lt;p&gt;This might seem like a trollish question, but I think needs serious
consideration. Ruby is not a young language with a small userbase. Sure
we might be small when compared to the sea of C code written and
deployed. But there is much more Ruby code in active use now than 5
years ago.&lt;/p&gt;

&lt;p&gt;Changes this large has an affect on both the users who choose to use it,
as well as those who don’t. Are we reaching the point where this is too
extreme? If so, where does an idea/implementation like this belong?&lt;/p&gt;

&lt;h3 id=&quot;ruby-compatibility&quot;&gt;Ruby compatibility&lt;/h3&gt;

&lt;p&gt;The implementation of refinements was first proposed and then
implemented by Shugo Maeda in MRI. Both JRuby and Rubinius have been
fighting for &lt;a href=&quot;http://rubyspec.org/&quot;&gt;RubySpec&lt;/a&gt; for many years, and there
has been no effort to spec this feature.&lt;/p&gt;

&lt;p&gt;Think about that. A prominent MRI runtime developer thinks about an implements an
interesting feature, it is brought into the most popular runtime used,
and the developers tasked with keeping up compatible runtimes are now
forced to implement the same feature in their respective environments.&lt;/p&gt;

&lt;p&gt;I get why JRuby and Rubinius developers would not be terribly motivated
to do that without an argument.&lt;/p&gt;

&lt;p&gt;Here is where I think MRI and JRuby/Rubinius have competing goals. MRI
is continuing to push the boundaries of how to express the Ruby language
in new ways. Whereas JRuby/Rubinius are forced to play catch up with
large features. I don’t mean that a knock against JRuby and Rubinius,
because they certainly bring their own unique things to the table. JRuby
has an amazing capacity for concurrency by leveraging the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_virtual_machine&quot;&gt;JVM&lt;/a&gt; and Rubinius
has rethought even the simplest things such as a &lt;a href=&quot;http://rubini.us/doc/en/tools/debugger/&quot;&gt;fully supported
debugger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On top of playing catch up, JRuby/Rubinius continues to advocate to
developers to try their runtime and highlight successful production
uses. It’s difficult to convince developers to use your runtime if you
have to change a large swath of code in the process.&lt;/p&gt;

&lt;p&gt;This doesn’t mean JRuby/Rubinius developers are fully biased against new
ideas.	It just means to me that they are heavily incentivized to fight
highly experimental features coming from a different runtime. Like
refinements.&lt;/p&gt;

&lt;h3 id=&quot;communication&quot;&gt;Communication&lt;/h3&gt;

&lt;p&gt;The number one thing I think we should be discussing is “How did we get
into this situation?” Many developers think refinements can be used in
good/productive ways (myself included), but why are many smart, respected developers
vehementely against it? Apart from language maturity or incentives
for/against, I think this entire argument suffers from what countless
arguments in the past suffer from: lack of communication.&lt;/p&gt;

&lt;p&gt;MRI is largely written by Japanese developers, but has become heavily
adopted in the United States. JRuby/Rubinius developers are
predominately English speaking. There are many developers who speak
multiple languages, but not enough.&lt;/p&gt;

&lt;p&gt;Brian Ford mentioned this in the &lt;a href=&quot;http://www.confreaks.com/videos/1278-rubyconf2012-toward-a-design-for-ruby&quot;&gt;talk I listed
above&lt;/a&gt;,
though I think he could have presented that topic in a much more
tactful, less rushed way. He proposes that we should all be discussing
these features in English.&lt;/p&gt;

&lt;p&gt;If I was a Japanese MRI developer, I would be offended by the way that was
presented. First, there are many Japanese developers who have done a
great job discussing very complex topics in English, just browse
&lt;a href=&quot;http://bugs.ruby-lang.org/issues&quot;&gt;ruby-lang&lt;/a&gt;. I think they should
be highlighted, or at least given some sort of props for their efforts.&lt;/p&gt;

&lt;p&gt;Second, I can’t help but put myself in their shoes. If I built some
awesome wizbat that I continued to care for but over the course of time
happened to be largely adopted by Russian developers. I would be a bit
upset if they criticized me for not discussing development issues in
Russian. Nothing against Russian, I just don’t speak a lick of it.&lt;/p&gt;

&lt;p&gt;On the other side of the coin, developers of JRuby and Rubinius are
being forced to implement some very difficult features in their
runtimes. Reading the dialog, it sounds like Charles’ and Brian’s
complaints are being heard but perhaps not discussed as thoroughly as
they probably should be.&lt;/p&gt;

&lt;p&gt;I do not have any good suggestions for this problem. But I do think this
is the crux of it. In fact, this is most likely a frustration that has
been worked through for many years and refinements has now been the
place to plant the flag and have it out.&lt;/p&gt;

&lt;h2 id=&quot;should-refinements-be-in-ruby-20&quot;&gt;Should refinements be in Ruby 2.0?&lt;/h2&gt;

&lt;p&gt;I think refinements offer some very interesting possibilities. It might
turn out to be a disaster or the to key to triggering some amazing
innovation in a caffeine-hyped developer. But instead of dividing the
community by campaigning for or against its inclusion. I think we should
be discussing matters that led us here, and will inevitably lead us to
other disagreements if left unresolved.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Big Changes Again. Joining Collective Idea.</title>
   <link href="/blog/2011/02/big-changes-again-joining-collective-idea"/>
   <updated>2011-02-03T16:08:50+00:00</updated>
   <id>/blog/2011/02/big-changes-again-joining-collective-idea</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Last year I felt compelled to start &lt;a href=&quot;/blog/2010/05/big-changes-going-independent/&quot;&gt;Connection Required&lt;/a&gt;. Not because I was forced to, but because I wanted to prove to myself that I could start and sustain a business. There is a sense of pride that comes with helping clients and making money from your efforts. I’ve encountered many surprises over the past year, mostly positive. This month, I’m going to be making another big transition and I’m joining &lt;a href=&quot;http://collectiveidea.com/&quot;&gt;Collective Idea&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why would I join another company rather than sticking with Connection Required? It isn’t because I am unable make it work. I’ve launched several successful projects, made my clients extremely happy and made money in the process. My family was able to move back to Northern Michigan. I’ve been able to spend more time at home than ever before. And I have had to push away as much work as I’ve accepted. All in all, I consider that successful.&lt;/p&gt;

&lt;p&gt;However, when I consider what I want Connection Required to become, I pause. I do great work, but that doesn’t mean I want to grow a consultancy and start hiring other developers. Enter &lt;a href=&quot;http://collectiveidea.com/&quot;&gt;Collective Idea&lt;/a&gt;. I’ve known these guys for a while. They’re an extremely sharp group and they build great software. At &lt;a href=&quot;http://collectiveidea.com/&quot;&gt;Collective Idea&lt;/a&gt;, I can continue to do what I do best: write great software and make clients happy. But instead of being solo, I am able to join a team of developers who share that same goal. For those who have been in my shoes, you’ll know, that’s a big deal.&lt;/p&gt;

&lt;p&gt;For those who haven’t been in this situation, at a certain point you realize how few hours you actually have in a day/month/year. Sure I can work more, but then that takes away from my family. I can start hiring, delegating, and leading others, but that requires growing. And I’m pretty confident I’d make an awful boss :). There is only so much I can do as an individual, but as part of a great team I can be a part of awesome.&lt;/p&gt;

&lt;p&gt;I’m excited about this transition because it’s a step forward on many fronts. You can also read the &lt;a href=&quot;http://collectiveidea.com/blog/archives/2011/02/03/welcome-zach-moazeni/&quot;&gt;announcement on Collective Idea’s site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to contact me at my new email address zach -at- collectiveidea.com. This site will continue to stay up, but will morph back into a blog over time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sharing a desk and internet</title>
   <link href="/blog/2011/01/sharing-a-desk-and-internet"/>
   <updated>2011-01-19T20:31:05+00:00</updated>
   <id>/blog/2011/01/sharing-a-desk-and-internet</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;After two months in the new office, I realized we’re going to need to a lot more stuff to fill up the space: couch, big screen, etc. You know, the essentials?&lt;/p&gt;

&lt;p&gt;Then I realized I could just bring in a new desk and offer up the space/internet for people who are passing through. Especially, since there are no &lt;a href=&quot;http://en.wikipedia.org/wiki/Coworking&quot;&gt;coworking spaces&lt;/a&gt; in Traverse City.&lt;/p&gt;

&lt;p&gt;So if you’re in or around &lt;a href=&quot;http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=Traverse+City,+MI&amp;amp;aq=&amp;amp;sll=37.0625,-95.677068&amp;amp;sspn=47.033113,68.291016&amp;amp;ie=UTF8&amp;amp;hq=&amp;amp;hnear=Traverse+City,+Grand+Traverse,+Michigan&amp;amp;z=13&quot;&gt;Traverse City&lt;/a&gt; / &lt;a href=&quot;http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=Elk+Rapids,+MI&amp;amp;sll=44.763057,-85.620632&amp;amp;sspn=0.082881,0.133381&amp;amp;ie=UTF8&amp;amp;hq=&amp;amp;hnear=Elk+Rapids,+Antrim,+Michigan&amp;amp;z=14&quot;&gt;Elk Rapids&lt;/a&gt;, feel free to stop by. I do ask that you sign in through &lt;a href=&quot;http://desksnear.me/workplaces/497-connection-required&quot;&gt;DesksNearMe&lt;/a&gt; beforehand so we don’t overcommit the space.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New iPad App Deployed: Spatik</title>
   <link href="/blog/2010/12/new-ipad-app-deployed-spatik"/>
   <updated>2010-12-23T17:40:23+00:00</updated>
   <id>/blog/2010/12/new-ipad-app-deployed-spatik</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;For the past few months I’ve been helping &lt;a href=&quot;http://twitter.com/#!/nicholaspatten&quot;&gt;Nicholas Patten&lt;/a&gt; take his vision and translate it into an iPad App. I’m proud to announce &lt;a href=&quot;http://itunes.apple.com/us/app/spatik/id411006823?mt=8&quot;&gt;Spatik&lt;/a&gt; was accepted today and is now available in the App Store.&lt;/p&gt;

&lt;p&gt;It’s purpose is to bring Google Reader and Twitter to a user’s fingertips (literally) and let the users schedule tweets. Spatik was a lot of fun to work on for me for a variety of reasons. While developing Spatik I learned more about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google’s OAuth workflow, I had previously worked on Twitter OAuth on other projects.&lt;/li&gt;
  &lt;li&gt;The OAuth workflow within the iOS environment.&lt;/li&gt;
  &lt;li&gt;Having an iOS client interact with a custom backend server.&lt;/li&gt;
  &lt;li&gt;The App Store approval process.&lt;/li&gt;
  &lt;li&gt;The iOS human user interface guidelines and building custom interface components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will post more about the development lessons learned in other posts. But right now, I want the spotlight squarely on &lt;a href=&quot;http://itunes.apple.com/us/app/spatik/id411006823?mt=8&quot;&gt;Spatik&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/#!/nicholaspatten&quot;&gt;Nicholas Patten&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the app, give it a spin!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tweetstream is now Web Scale</title>
   <link href="/blog/2010/12/tweetstream-is-now-web-scale"/>
   <updated>2010-12-22T19:14:51+00:00</updated>
   <id>/blog/2010/12/tweetstream-is-now-web-scale</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Over the past few months, I have been working with &lt;a href=&quot;http://downstreamapp.com&quot;&gt;Downstream&lt;/a&gt; on one of their products &lt;a href=&quot;http://tweetstreamapp.com&quot;&gt;Tweetstream&lt;/a&gt;. In addition to building features, we have experienced a significant issue with the infrastructure.&lt;/p&gt;

&lt;p&gt;Last night we pushed live a slew of updates and as a result the application is much speedier. The guys were so thrilled with the result that they wanted me to write a geeky technical post about all the changes for their users. You can read the entire article &lt;a href=&quot;http://blog.downstreamapp.com/post/2418156381/tweetstream-is-now-web-scale&quot;&gt;on their blog&lt;/a&gt; and also discuss it on &lt;a href=&quot;http://news.ycombinator.com/item?id=2032126&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>December Northern Michigan Web and Mobile Meetup</title>
   <link href="/blog/2010/12/december-northern-michigan-web-and-mobile-meetup"/>
   <updated>2010-12-16T16:37:53+00:00</updated>
   <id>/blog/2010/12/december-northern-michigan-web-and-mobile-meetup</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Last night we had our &lt;a href=&quot;http://www.meetup.com/nmich-web-mobile/calendar/15499042/&quot;&gt;December Michigan Web and Mobile Meetup&lt;/a&gt;. We only had a couple guys due to family commitments, but that’s understandable since we’re only a week away from Christmas.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more-463&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the talk from &lt;a href=&quot;/blog/2010/11/november-northern-michigan-web-and-mobile-meetup/&quot;&gt;last month&lt;/a&gt;, Gary Vaynerchuk mentioned Zappos and hearing about their rich company culture, we watched an interview by the CEO of Zappos, Tony Hsieh.&lt;/p&gt;

&lt;p&gt;Before we watched the interview, we actually watched Jeff Bezos of Amazon give a short clip when they acquired Zappos:&lt;/p&gt;

&lt;object width=&quot;600&quot; height=&quot;385&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/-hxX_Q5CnaA?fs=1&amp;amp;hl=en_US&quot; /&gt;&amp;lt;/param&amp;gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&amp;lt;/param&amp;gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&amp;lt;/param&amp;gt;&lt;embed src=&quot;http://www.youtube.com/v/-hxX_Q5CnaA?fs=1&amp;amp;hl=en_US&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;600&quot; height=&quot;385&quot; /&gt;&amp;lt;/embed&amp;gt;&lt;/object&gt;

&lt;p&gt;&lt;a href=&quot;http://bigthink.com/ideas/24384&quot;&gt;Here’s Tony’s interview&lt;/a&gt; on &lt;a href=&quot;http://bigthink.com/&quot;&gt;BigThink.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tony speaks a lot differently than Gary, but has a lot of insight on Business and Happiness. He mentioned &lt;a href=&quot;http://www.amazon.com/Good-Great-Companies-Leap-Others/dp/0066620996&quot;&gt;Good to Great&lt;/a&gt; and having read that a few years ago, I heartily recommend it as well. He also mentioned &lt;a href=&quot;http://www.amazon.com/Tribal-Leadership-Leveraging-Thriving-Organization/dp/0061251305&quot;&gt;Tribal Leadership&lt;/a&gt; which I’ll be picking up soon. And of course there’s Tony’s book &lt;a href=&quot;http://www.amazon.com/Delivering-Happiness-Profits-Passion-Purpose/dp/0446563048&quot;&gt;Delivering Happiness&lt;/a&gt; which I still need to check out.&lt;/p&gt;

&lt;p&gt;I really appreciate Tony’s perspective on culture and happiness. I also connected with his comments about the &lt;a href=&quot;http://en.wikipedia.org/wiki/Generation_Y&quot;&gt;Millennials&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…there are so many people in corporate America where they’re a different person at home on weekends versus on monday when they’re in the office. And they leave a little part of themselves, or a big part of themselves at home … maybe what the millennials are bringing to the forefront [is that] they can be the same person…&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>November Northern Michigan Web and Mobile Meetup</title>
   <link href="/blog/2010/11/november-northern-michigan-web-and-mobile-meetup"/>
   <updated>2010-11-19T14:06:46+00:00</updated>
   <id>/blog/2010/11/november-northern-michigan-web-and-mobile-meetup</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Last night we had our &lt;a href=&quot;http://www.meetup.com/nmich-web-mobile/calendar/15107332/&quot;&gt;second Northern Michigan Web and Mobile Meetup&lt;/a&gt; and I think this went better than our &lt;a href=&quot;/blog/2010/11/first-northern-michigan-web-and-mobile-meetup&quot;&gt;first&lt;/a&gt;. This week I grabbed a couple pizzas from &lt;a href=&quot;http://www.chefcharlesinc.com/&quot;&gt;Chef Charles in Elk Rapids&lt;/a&gt;, that guy can make a tasty pie. In fact I still have a couple slices leftover for lunch today. This week we watched &lt;a href=&quot;http://garyvaynerchuk.com/&quot;&gt;Gary Vaynerchuk’s&lt;/a&gt; RailsConf 2010 talk.&lt;/p&gt;

&lt;object width=&quot;600&quot; height=&quot;385&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/-QWHkcCP3tA?fs=1&amp;amp;hl=en_US&quot; /&gt;&amp;lt;/param&amp;gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&amp;lt;/param&amp;gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&amp;lt;/param&amp;gt;&lt;embed src=&quot;http://www.youtube.com/v/-QWHkcCP3tA?fs=1&amp;amp;hl=en_US&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;600&quot; height=&quot;385&quot; /&gt;&amp;lt;/embed&amp;gt;&lt;/object&gt;

&lt;p&gt;Gary has great stage presence, and I really connect with his messages in this talk. It also sounded like the group resonated with the talk and fed off his energy. We discussed items like caring about client relationships, the “Mom and Pop” attitude for tech and business, and hustling products.&lt;/p&gt;

&lt;p&gt;I’ve set a date for &lt;a href=&quot;http://www.meetup.com/nmich-web-mobile/calendar/15499042&quot;&gt;the next meetup for December 14th&lt;/a&gt;. We may be at &lt;a href=&quot;http://www.citymac.net/&quot;&gt;CityMac in Traverse City&lt;/a&gt; again, but I think it may be fun to mix it up and try out the Library. I’ll firm up the location closer to the 14th.&lt;/p&gt;

&lt;p&gt;If you’re interested in Web, Mobile, and Business, I encourage you to stop by and hang out!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>First Northern Michigan Web and Mobile Meetup</title>
   <link href="/blog/2010/11/first-northern-michigan-web-and-mobile-meetup"/>
   <updated>2010-11-02T13:31:07+00:00</updated>
   <id>/blog/2010/11/first-northern-michigan-web-and-mobile-meetup</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Last Thursday we had our first &lt;a href=&quot;http://www.meetup.com/nmich-web-mobile/&quot;&gt;Northern Michigan Web and Mobile Meetup&lt;/a&gt; meeting. While eating pizza, we watched &lt;a href=&quot;http://bigthink.com/ideas/18516&quot;&gt;an interview with Jason Fried&lt;/a&gt; and discussed it afterwards.&lt;/p&gt;

&lt;script src=&quot;http://video.bigthink.com/player.js?deepLinkEmbedCode=dhNG42MTrKizs8l5v500roLKkUKF-JNU&amp;amp;width=516&amp;amp;autoplay=0&amp;amp;height=290&amp;amp;embedCode=dhNG42MTrKizs8l5v500roLKkUKF-JNU&quot;&gt;&lt;/script&gt;

&lt;p&gt;I had a pretty good time, and received some nice compliments on the format. Talking with the group, we may continue to watch and discuss interviews. I’ve set a date for the &lt;a href=&quot;http://www.meetup.com/nmich-web-mobile/calendar/15107332/&quot;&gt;next meetup on November 18th&lt;/a&gt;. I’m still considering where we should go for the venue. CityMac was accommodating, but a few mentioned the meeting rooms in the Library.&lt;/p&gt;

&lt;p&gt;If you’re in the Traverse City area on the 18th, I encourage you to drop by!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HarvestApp.com Impresses Me Again</title>
   <link href="/blog/2010/10/harvestapp-com-impresses-me-again"/>
   <updated>2010-10-21T21:12:44+00:00</updated>
   <id>/blog/2010/10/harvestapp-com-impresses-me-again</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I’ve been using &lt;a href=&quot;http://www.getharvest.com/&quot;&gt;Harvest&lt;/a&gt; for a few years now, and as a customer have been a big fan of their product. A couple months ago they made a &lt;a href=&quot;http://www.getharvest.com/blog/2010/08/secure-connection-for-all-accounts/&quot;&gt;change to their plans&lt;/a&gt; and impressed me again. This time though, it wasn’t as a customer, it was as a developer and business owner.&lt;/p&gt;

&lt;p&gt;It wasn’t the details of the change that caught my eye, it was that prior to the announcement, they sent me an email regarding how the change affected &lt;a href=&quot;http://github.com/zmoazeni/harvested&quot;&gt;an open source library&lt;/a&gt; I maintain.&lt;/p&gt;

&lt;p&gt;Here’s the email, posted with permission from Harvest:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Hi Zach&lt;/p&gt;

    &lt;p&gt;I’m reaching out early, before the official notification about this, to ask a question about your Harvest client: http://simplechatter.com/2010/04/harvested-a-new-ruby-api-wrapper/&lt;/p&gt;

    &lt;p&gt;In a couple of weeks Harvest will be implementing SSL across the board for all Harvest accounts. Accounts can opt-out of SSL (through Harvest support) but HTTPS will become the default for all Harvest access.&lt;/p&gt;

    &lt;p&gt;The net effect for accounts currently using non-SSL HTTP will be an HTTP 301 redirect from http://subdomain.harvestapp.com to https://subdomain.harvestapp.com when this change goes into effect for everyone.&lt;/p&gt;

    &lt;p&gt;Does your client support this 301 redirect, and SSL in general? If not, we’d like to work with you to support this, to avoid any issues for your access, or for anyone using your client.&lt;/p&gt;

    &lt;p&gt;Please let me know and feel free to contact me for any details, or if I can help in any way.&lt;/p&gt;

    &lt;p&gt;Thanks!&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;The fact that the company not only keeps tabs on the current software community around their product, and intentionally reaches out to them for potential issues, &lt;strong&gt;and&lt;/strong&gt; offers to help out to fix those issues &lt;em&gt;speaks volumes&lt;/em&gt;. Fostering a community and enabling evangelists around your product is often overlooked and under-prioritized.&lt;/p&gt;

&lt;p&gt;Kudos guys, and keep up the good work.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;Feel free to discuss this here and on &lt;a href=&quot;http://news.ycombinator.com/item?id=1817484&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Pain of Launching Your Own Projects</title>
   <link href="/blog/2010/10/the-pain-of-launching-your-own-projects"/>
   <updated>2010-10-19T13:35:04+00:00</updated>
   <id>/blog/2010/10/the-pain-of-launching-your-own-projects</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Ask anyone who has redesigned their own website or released an open source project, pushing something live can be painful. I think there are two primary reasons for this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;concern about making a great first impressions&lt;/li&gt;
  &lt;li&gt;the lack of constraints that are normally in place when working on client projects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Launching and redesigning your own website is &lt;em&gt;mentally tough&lt;/em&gt;. It’s rarely a technical problem. Since it’s your own site and no one paying you to build it, it can be very easy to keep adding features and polishing. Both of which delay the launch date.&lt;/p&gt;

&lt;p&gt;Although they are often the source of stress, budgets and deadlines are useful. I’ve experienced if you embrace a constraint rather than ignore it, you will quickly re-prioritize the tasks and find innovative work-arounds for the largest tasks. We do this all the time when working on other projects, the trick is keep focused when working on your own projects.&lt;/p&gt;

&lt;p&gt;Take this &lt;a href=&quot;http://connectionrequired.com&quot;&gt;website&lt;/a&gt; for example. I went from PSD to Launched in 13 days (17 if you count the weekends). If this was a client project, that would be utterly horrible for this small site. However in the My-Project Timezone, that’s not too shabby. Don’t get me wrong, this site isn’t perfect, instead it’s littered with warts (none of which I’m going to point out). I didn’t focus on building the perfect site, I focused on &lt;strong&gt;good enough for launch&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pick-a-deadline&quot;&gt;Pick a Deadline&lt;/h2&gt;

&lt;p&gt;After launching a few projects, I’ve learned a few useful tips. Pick a deadline and keep your feet to the fire. If it doesn’t look like you can launch by that deadline, rip out features. One large wart for this site, is a missing portfolio section. That was a very intentional omission, one I have designs and even HTML/CSS for, but it was cut in favor of launching. If you’re not a fan of deadlines, set a fake budget and track your time against it. That may even provide a more realistic picture on how you much effort you put into the project.&lt;/p&gt;

&lt;h2 id=&quot;polish-after-launch&quot;&gt;Polish After Launch&lt;/h2&gt;

&lt;p&gt;Another tip I’ve learned: polish after launch. We can become consumed with polishing and tweaking to the point that it holds us back. One advantage our projects have over client projects, is that there’s nothing stopping constant polish after launch. If it’s the critical eye of peers and competitors forcing you to make it perfect, stop and relax. Making a good first impression can drive us insane. It’s important to remember projects don’t stop at launch, they evolve over time. Get it to “good enough”, launch it, then continue polishing.&lt;/p&gt;

&lt;h2 id=&quot;solve-simpler-problems&quot;&gt;Solve Simpler Problems&lt;/h2&gt;

&lt;p&gt;Finally, there are always going to be implementation issues that will get in our way. Our first reaction to figure them out, and that is great, but don’t get hung up on it. It’s okay to change course, alter the final solution, or even post-pone troubling issues. You’re going to be forced to adapt, and you can either take the timeline-hit in figuring out the original problem, or you can change the problem and solve a simpler one.&lt;/p&gt;

&lt;p&gt;I’m not advocating shoddy or half-assed work, I’m pointing out that launching is more important than perfection.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New Traverse City User Group: Northern Michigan Web and Mobile Meetup</title>
   <link href="/blog/2010/10/new-traverse-city-user-group-northern-michigan-web-and-mobile-meetup"/>
   <updated>2010-10-15T13:48:05+00:00</updated>
   <id>/blog/2010/10/new-traverse-city-user-group-northern-michigan-web-and-mobile-meetup</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;After we moved back home in Elk Rapids Michigan, one thing that I acutely missed was the number of user groups we had in West Michigan. Don’t get me wrong, West Michigan doesn’t have nearly as many compared to a metropolitan hub. In Chicago they even have a &lt;a href=&quot;http://groups.google.com/group/vimchicago&quot;&gt;VIM Usergroup&lt;/a&gt;. But West Michigan did a lot of events going on, and active communities around them.&lt;/p&gt;

&lt;p&gt;Instead of lamenting about what’s missing, I decided to put together my own user group up here. Enter the &lt;a href=&quot;http://www.meetup.com/nmich-web-mobile/&quot;&gt;Northern Michigan Web and Mobile Meetup&lt;/a&gt; which will have it’s first event in two weeks at &lt;a href=&quot;http://www.meetup.com/nmich-web-mobile/calendar/15108620/&quot;&gt;6:00 PM October 28th&lt;/a&gt; at &lt;a href=&quot;http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=citymac+in+traverse+city&amp;amp;sll=37.0625,-95.677068&amp;amp;sspn=56.59387,91.230469&amp;amp;ie=UTF8&amp;amp;hq=citymac&amp;amp;hnear=Traverse+City,+Grand+Traverse,+Michigan&amp;amp;z=13&amp;amp;iwloc=A&quot;&gt;CityMac&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have ideas on the direction and the topics this group could discuss, however I’m sure after a few months we’ll hit a groove and discover what the group’s focus is going to be.&lt;/p&gt;

&lt;p&gt;So if you’re in the Traverse City area on the 28th and feel like talking geeky feel free to drop by! Make it a point to seek me out and introduce yourself, I love meeting fellow tech geeks.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New Company, New Look</title>
   <link href="/blog/2010/10/new-company-new-look"/>
   <updated>2010-10-14T11:37:13+00:00</updated>
   <id>/blog/2010/10/new-company-new-look</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I’ve blogged at Simple Chatter for a few years, but now it feels like a good time to retire that domain and roll it into a newer fresher look. Oh and while we’re at it, why don’t we create a new company?&lt;/p&gt;

&lt;p&gt;World, meet Connection Required; Connection Required, meet the World!&lt;/p&gt;

&lt;p&gt;This site will continue to be fleshed out in the coming weeks, but feel free to take a gander. And if you have a Ruby/Rails or iOS project in mind, feel free to &lt;a href=&quot;/contact&quot;&gt;drop me a line&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.visualhero.com/&quot;&gt;visual hero crew&lt;/a&gt; did a great job on the design.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I think Twitter's OAuth-only Access is a Waste of Time</title>
   <link href="/blog/2010/09/i-think-twitters-oauth-only-access-is-a-waste-of-time"/>
   <updated>2010-09-03T19:41:57+00:00</updated>
   <id>/blog/2010/09/i-think-twitters-oauth-only-access-is-a-waste-of-time</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I don’t normally write sensationalist articles, but today I’m going depart from the norm and make a bold claim: I think Twitter’s &lt;a href=&quot;http://blog.twitter.com/2010/08/twitter-applications-and-oauth.html&quot;&gt;change to OAuth-only authentication&lt;/a&gt; is a waste of time for developers and businesses.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, I think the &lt;a href=&quot;http://oauth.net/core/1.0/&quot;&gt;OAuth spec&lt;/a&gt; is slick and has very good intentions at it’s core. Nor am I knocking it out of inexperience, as I’ve been building OAuth based applications for the past 6 months. However my primary gripe with Twitter’s OAuth-only stance boils down to &lt;a href=&quot;http://dev.twitter.com/pages/xauth&quot;&gt;xAuth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those of you that aren’t familiar with Twitter’s recent change, before September 1st you could access their API by passing across your twitter username and password. This was fine if you were using your own credentials, however the Twitter ecosystem is rather large, and most people who interact with Twitter do it via a &lt;a href=&quot;http://itunes.apple.com/us/app/twitter/id333903271?mt=8&quot;&gt;3rd&lt;/a&gt; &lt;a href=&quot;http://iconfactory.com/software/twitterrific&quot;&gt;party&lt;/a&gt; &lt;a href=&quot;http://cotweet.com/&quot;&gt;service&lt;/a&gt;. The security issue is handing your password to an untrusted source. As of September 1st however, developers are only allowed to access the API using &lt;a href=&quot;http://dev.twitter.com/pages/auth_overview&quot;&gt;OAuth&lt;/a&gt;, which requires you to give your username and password &lt;em&gt;only&lt;/em&gt; to Twitter and then Twitter will authorize the application on your behalf. Even I admit, the protocol is rather elegant. When it comes to Web applications, I can hardly argue the security. The user is already in a browser and being directed to Twitter and back mostly only fires up User Experience guys.&lt;/p&gt;

&lt;p&gt;However, I have a huge issue with &lt;a href=&quot;http://dev.twitter.com/pages/xauth&quot;&gt;xAuth&lt;/a&gt;. xAuth is Twitter’s solution to applications that have a large number of passwords already stored and allows the developers to convert them to OAuth-friendly keys behind the scenes. Well, from what I gather, that was the intended purpose. However there are many mobile Twitter applications out there &lt;em&gt;only&lt;/em&gt; are using xAuth. Why does this tick me off?&lt;/p&gt;

&lt;p&gt;1) As a user, I’m still giving my password to the application. The application is not &lt;em&gt;supposed&lt;/em&gt; to store the credentials, however this is un-enforceable. At this point I’m only safe-guarded against applications that have their passwords stolen. I won’t deny that’s an issue, but not enough to force all developers to go OAuth-only.&lt;/p&gt;

&lt;p&gt;2) Even &lt;a href=&quot;http://itunes.apple.com/us/app/twitter/id333903271?mt=8&quot;&gt;Twitter’s official client&lt;/a&gt; requires me to hand over my password. If Twitter is going to take the stance that all API usage is going to go through OAuth, I think they should eat their own dog food and redirect me to a mobile browser.&lt;/p&gt;

&lt;p&gt;Do I dislike OAuth? Certainly not. And I know Twitter has some brilliant talent. But if Twitter is going to make OAuth vs Basic Auth this big of a priority, I think they are missing mark by moving a lot of applications to xAuth.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;You can also discuss this further on &lt;a href=&quot;http://news.ycombinator.com/item?id=1660851&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Public Comment To Those Enabling Abuse</title>
   <link href="/blog/2010/08/a-public-comment-to-those-enabling-abuse"/>
   <updated>2010-08-31T14:01:16+00:00</updated>
   <id>/blog/2010/08/a-public-comment-to-those-enabling-abuse</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Michelle Greer &lt;a href=&quot;http://www.michellesblog.net/blogs/my-challenge-to-michael-arrington-techcrunch-hint-its-not-hard&quot;&gt;recently wrote about viscous online comments on TechCrunch&lt;/a&gt;. Unfortunately, over the years I’ve seen a few ugly incidents where a female was singled out online and verbally attacked. To me, there is one thing worse than these gut-less commenters: it’s telling a minority to “suck it up” or “don’t take it personal” or “that’s just the way it is” or “quit whining”.&lt;/p&gt;

&lt;p&gt;If you’re someone who tells a minority to ignore abuse, you need to seriously reconsider your position. Because it is sickening.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>You're running a marathon</title>
   <link href="/blog/2010/08/running-a-marathon"/>
   <updated>2010-08-30T19:50:28+00:00</updated>
   <id>/blog/2010/08/running-a-marathon</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I’ll be the first to admit it: I can work myself to death. Paul Boag recently wrote a great article about the &lt;a href=&quot;http://boagworld.com/random/work-less&quot;&gt;false “badge of honor”&lt;/a&gt; regarding long hours in the tech field. I love what I do, and I am continuously grateful that I am able to make a decent living in software. But I’m also prone to burnout.&lt;/p&gt;

&lt;p&gt;His article really hits home for me because I’ve been burnt out a couple times in the past. I’m still trying to improve my self-awareness, but unfortunately burnout is like bad breath: generally the people around you notice first. So far my main red flag has been “Do I feel like I’m sprinting from task to task?” Despite what some startups believe, running a company is a marathon.&lt;/p&gt;

&lt;p&gt;Over the years, I’ve been approached by numerous people asking how they can break into software. How hard is it? How smart do you have to be? Which language is best? My main answer is always: to succeed in software you have to enjoy what you do and you have to be persistent. Software changes monthly, and sometimes it feels daily. At first enthusiasm will carry you through long hours reading and playing with new libraries and frameworks. But when you start picking up your 5th language and your 15th web framework, your motivation is primarily going to come from enjoyment. The key is realize you’re not sprinting to an finish line. You’re running a life-long marathon. I think the same philosophy applies to succeeding in business.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I almost edited the previous paragraph to say “career-long”, yet when I quantify how many hours of my life will be spent earning a living, labeling it “career-“ just doesn’t seem appropriate.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is nothing wrong with hard work and I am certainly not promoting laziness. However over-committing yourself or coming home unhappy is a recipe for disaster. Make yourself take enjoyment from your work and from outside of work. And if you can’t, I wish for you the courage to make the necessary changes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Client Satisfaction and Resources</title>
   <link href="/blog/2010/08/client-satisfaction-and-resources"/>
   <updated>2010-08-24T14:47:20+00:00</updated>
   <id>/blog/2010/08/client-satisfaction-and-resources</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I’ve heard the argument “it takes Resources to provide good Client Satisfaction” and I simply have to disagree. &lt;em&gt;Great&lt;/em&gt; client satisfaction has to come first, and the resources will follow. I also believe that companies who take this stance will often re-use those resources to provide even better client satisfaction.&lt;/p&gt;

&lt;h2 id=&quot;bargains&quot;&gt;Bargains&lt;/h2&gt;

&lt;p&gt;When most people think about making their clients happy, they think about bargains. A bargain is simply the same services at a reduced price. And that certainly is one factor in making clients happy, since who doesn’t like saving money? Sadly, I think bargains are the first to come mind because they are so easy compared to the alternatives. “I’ll just slash my prices and more clients will come.” However there are other ways to provide value and make clients happier without taking a hit on price.&lt;/p&gt;

&lt;h2 id=&quot;craftsmanship&quot;&gt;Craftsmanship&lt;/h2&gt;

&lt;p&gt;Some clients heavily prefer the quality of the service or product. If I’m in the market for a high-end acoustical guitar, I’m going to favor the quality of a guitar over the one with the best deal. This resonates strongly with software in the form design and often overlooked practices such as automated testing.&lt;/p&gt;

&lt;h2 id=&quot;listening-and-solving-the-real-problem&quot;&gt;Listening and Solving the Real Problem&lt;/h2&gt;

&lt;p&gt;One of the most effective strategies I’ve found is: listen to the client and focus on solving the problem at hand. When I say “listen”, I don’t mean “hear the sounds coming from their mouth”, I mean &lt;em&gt;really&lt;/em&gt; listen to both what they are saying, and what they aren’t. There are many clients out there who will pass on a bargain if it only partially solves their problem. I constantly hear stories from both other developers and clients about scenarios where developers ignored the problem at hand, and decided to solve a different one. They may work on an optimization issue when performance is acceptable, or decide to roll the work into an open source project when a specific and custom solution is really what’s needed. Or build an exquisitely elegant design, that even I admire, yet it does not do what is requested.&lt;/p&gt;

&lt;p&gt;This is not just applied to software. A friend of mine owns a couple local pizza and ice-cream parlors and he shared his experience: The best way to help an upset customer is simply to listen to them. Most of the time they’re not wanting their money back or a coupon. They just want to know that their voice was heard and respected.&lt;/p&gt;

&lt;p&gt;I always laugh at how appropriate this SNL clip is:&lt;/p&gt;

&lt;object width=&quot;512&quot; height=&quot;288&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.hulu.com/embed/8K3jmsS5ay9KB3yX06Q17Q&quot; /&gt;&amp;lt;/param&amp;gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&amp;lt;/param&amp;gt;&lt;embed src=&quot;http://www.hulu.com/embed/8K3jmsS5ay9KB3yX06Q17Q&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;512&quot; height=&quot;288&quot; allowfullscreen=&quot;true&quot; /&gt;&amp;lt;/embed&amp;gt;&lt;/object&gt;

&lt;h2 id=&quot;experience&quot;&gt;Experience&lt;/h2&gt;

&lt;p&gt;Sometimes clients just want a memory to cherish. A couple years back, my wife and I decided to go to a &lt;a href=&quot;http://www.ruthschris.com/&quot;&gt;Ruth’s Chris Steak House&lt;/a&gt; and we were amazed at the dining experience. It was certainly one we won’t forget. When we were in Portland, we also had a fantastic night at &lt;a href=&quot;http://www.portlandcitygrill.com&quot;&gt;the City Grill on the 30th floor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In software, that’s exactly the purpose field user experience design. Certain applications thrive by continuing to improve their interface to be as simple and effective as possible. Other applications thrive by removing options and choices from their customer base. A recent post by &lt;a href=&quot;http://www.dilbert.com/blog/entry/the_less_feature/&quot;&gt;Scott Adams specifically addresses this point&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;None of these points take significant resources to do well, and each of these can be improved with additional resources. Please share any successes or failures you’ve found. I’d love to hear them.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1629929&quot;&gt;You can also discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Clients that Care</title>
   <link href="/blog/2010/08/clients-that-care"/>
   <updated>2010-08-03T15:08:25+00:00</updated>
   <id>/blog/2010/08/clients-that-care</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Whenever a client hires me, I make it a very specific point not to bring baggage to the table. Whether it’s other project scheduling issues, family schedules, strong toolset opinions, or any other demands on a freelancer’s time or mental-space. Some clients will gracefully deal with a freelancer’s baggage, but I’ve found that most clients would rather not have to concern themselves with it. As a result I work hard to guard my clients from that stress.&lt;/p&gt;

&lt;p&gt;However, some baggage does inevitably come through. During the middle of July, we had a family emergency and I needed to immediately take off a couple weeks. Keep in mind two of the projects I was on were planning on launching at the end of July. So going offline that abruptly was a significant disruption.&lt;/p&gt;

&lt;p&gt;I talked with each of my clients individually and I was relieved that they all took it well. After my first week out though, I was shocked at how thoughtful some of the emails/IMs/and Phone calls were. Here are a few snippets that I received:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Just wanted to check in and make sure you were doing ok. Again, let us know if there’s anything we can do.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Obviously, do what you need to do for yourself. If that’s work I’ll be happy to keep you busy… We’d like to send some flowers…” (In response to me mentioning I may work on a feature to keep my mind busy)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Take care and as much time as you need.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Please take the time you need.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Nothing comes before family. Take your time, when you’re ready to start back up just let me know. No rush.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve come to appreciate that my ideal client is not just a cool project nor a large budget, but instead a rich relationship. I feel very blessed that all of my clients are so considerate because there are many others out there who aren’t.&lt;/p&gt;

&lt;p&gt;Thank you Mike, Dana, Orlando, McHughson, Daniel, and Nicholas.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why should I do business with you?</title>
   <link href="/blog/2010/06/why-should-i-do-business-with-you"/>
   <updated>2010-06-17T12:58:36+00:00</updated>
   <id>/blog/2010/06/why-should-i-do-business-with-you</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;All things being equal, people want to do business with their friends.&lt;/p&gt;

  &lt;p&gt;All things being not quite equal, people STILL want to do business with their friends.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;- Jeffrey Gitomer in &lt;a href=&quot;http://www.amazon.com/Little-Red-Book-Selling-Principles/dp/1885167601&quot;&gt;The Little Red Book of Selling&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I love this quote and &lt;a href=&quot;http://www.amazon.com/Little-Red-Book-Selling-Principles/dp/1885167601&quot;&gt;this book&lt;/a&gt;. &lt;a href=&quot;http://opensoul.org/&quot;&gt;Brandon Keepers&lt;/a&gt; posed a question over a couple beers (well OK, maybe more than a couple beers):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a client asks you: “Why should I do business with you?”, how would you answer?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was a great question. I took a long pull of my &lt;a href=&quot;http://newhollandbrew.com/corp/beer&quot;&gt;Poet&lt;/a&gt; and stammered an answer. After thinking about the question a couple days, here’s my (sober) answer “because I’m honest, I work very hard, and I have a blast doing what I do”.&lt;/p&gt;

&lt;p&gt;Here’s the longer version:&lt;/p&gt;

&lt;h2 id=&quot;differentiators&quot;&gt;Differentiators&lt;/h2&gt;

&lt;p&gt;I consider the following as ways for a company to set themselves apart from their competitors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost&lt;/strong&gt; : How much does it cost for your services or for your product?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expertise and Experience&lt;/strong&gt; : How much experience do you have with the tools you’re working with and the problems you’re working on? Are you considered a leader in your community?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Influence&lt;/strong&gt; : Do you have an audience that your clients also wants to connect with? Do you have certain investment or new business contacts that your clients want you to make introductions?&lt;/p&gt;

&lt;h2 id=&quot;fundamentals&quot;&gt;Fundamentals&lt;/h2&gt;

&lt;p&gt;These are the fundamentals I feel successful businesses have to address if they want to provide value for their clients.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authenticity&lt;/strong&gt; : Are you honest are you about what you’re selling and your ability to meet certain commitments?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hard Work&lt;/strong&gt; : Do you care about what you’re doing and more importantly who you’re doing it for? What is the quality of your work? How often do you put yourself in your client’s shoes to better serve their needs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Great Attitude&lt;/strong&gt; : Are you fun to work with? Do your clients dread picking up the phone or having you drop by or do they walk away with a better attitude? Do you make your clients feel ignorant when they ask questions? Do you listen to feedback well?&lt;/p&gt;

&lt;h2 id=&quot;mixed-priorities&quot;&gt;Mixed Priorities&lt;/h2&gt;

&lt;p&gt;I see many companies focusing on ways to differentiate themselves and ignore the fundamentals at the same time. Don’t get me wrong, I think the differentiators are great, but only when they build from the fundamentals.&lt;/p&gt;

&lt;p&gt;I’m a reasonably smart guy, and I’ve been around the block many times building applications using Ruby/Rails. But my experience, my network, and even my cost are all secondary to providing &lt;strong&gt;value&lt;/strong&gt; through hard work and honesty. As well as being able to do it in a way that makes it a lot of fun for both my clients and myself.&lt;/p&gt;

&lt;h2 id=&quot;i-want-to-hear-from-you&quot;&gt;I want to hear from you&lt;/h2&gt;

&lt;p&gt;What I love about this outlook is that there are no barriers to the doing the fundamentals well. They are difficult to do well, hell I’m constantly learning new ways to better apply them, but you can start immediately. Your experience, expertise and network are all built over time.&lt;/p&gt;

&lt;p&gt;What has been your experience? I want to hear from both companies who provide their services as well as from clients who have had great and less-than-great interactions.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nginx is extremely performant</title>
   <link href="/blog/2010/06/nginx-is-extremely-performant"/>
   <updated>2010-06-11T17:10:16+00:00</updated>
   <id>/blog/2010/06/nginx-is-extremely-performant</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;A couple days ago I wrote an article about &lt;a href=&quot;/2010/06/i-am-far-from-unemployed&quot;&gt;perceptions I’ve encountered as a freelancer&lt;/a&gt;. The article took off on &lt;a href=&quot;http://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;, which a great feeling.&lt;/p&gt;

&lt;p&gt;I received several thousand page views in the process. At first I was like “Wow!” and that quickly turned into “Oh crap…” I wasn’t sure if my server hosting this blog would be able to handle that amount of traffic. But &lt;a href=&quot;http://nginx.org/&quot;&gt;Nginx&lt;/a&gt; handled it like a champ.&lt;/p&gt;

&lt;p&gt;When I setup this blog, I found an excellent How-To article on setting up Wordpress on Nginx using FastCGI from &lt;a href=&quot;http://elasticdog.com/2008/02/howto-install-wordpress-on-nginx/&quot;&gt;Aaron Schaefer&lt;/a&gt;. At the time this blog was using 5 PHP CGI processes and wasn’t using any form of Wordpress page caching, however neither memory nor CPU broke a sweat. And I’m only running on a few hundred MBs.&lt;/p&gt;

&lt;p&gt;I don’t think Nginx is a perfect fit in every instance, however I’m really pleased with the results. I definitely recommend it to anyone else who is on the fence.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I am far from unemployed</title>
   <link href="/blog/2010/06/i-am-far-from-unemployed"/>
   <updated>2010-06-09T12:13:55+00:00</updated>
   <id>/blog/2010/06/i-am-far-from-unemployed</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Monday was the beginning of my third week working independent. And these three weeks have been a lot of fun. Very busy, but fun. However one thing that surprised me was the reaction from others when they asked what I do for a living.&lt;/p&gt;

&lt;p&gt;The most typical reaction I have been getting from local friends and acquaintances who are full time employees is sympathy. Phrases like “Well you gotta do what you gotta do.” or “Things will turn around, the economy is improving.”&lt;/p&gt;

&lt;p&gt;No no &lt;strong&gt;NO!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;chose&lt;/em&gt; this path. I wasn’t forced to go independent as a result of a layoff or the inability to find full time employment. I love what I do and I love that I am able to help other businesses who need my skills and experience.&lt;/p&gt;

&lt;p&gt;This reminds me of a blog post a friend shared years ago, that has now been lost, which described an Entrepreneur’s move from the Midwest to the West Coast. He too was taken back at the differences in reactions. Generally a Midwest-ern would say something out of pity or look at him as if he were jobless. While the people he talked to in the West Coast would get excited and share their own dreams of starting something new.&lt;/p&gt;

&lt;p&gt;I am far from unemployed and so are the plethora of other software freelancers out there. Sure we may have downtime, but that is just one part of our world. So the next time you are talking to someone who mentions they are independent, and you feel sorry for them, mentally check yourself. If you like the guy or gal, ask for their business card and pass it to someone you think would need their services or tweet/blog about the great interaction you had with them.&lt;/p&gt;

&lt;p&gt;I appreciate that way more than sympathetic encouragement.&lt;/p&gt;

&lt;h3 id=&quot;update-6122010&quot;&gt;Update 6/12/2010&lt;/h3&gt;

&lt;p&gt;This article took off on Hacker news and there was a lot of &lt;a href=&quot;http://news.ycombinator.com/item?id=1416883&quot;&gt;great feedback&lt;/a&gt; both for and against this post.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Big Changes. Going Independent.</title>
   <link href="/blog/2010/05/big-changes-going-independent"/>
   <updated>2010-05-24T17:30:12+00:00</updated>
   <id>/blog/2010/05/big-changes-going-independent</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;h2 id=&quot;whats-the-news&quot;&gt;What’s the news?&lt;/h2&gt;

&lt;p&gt;Starting this week, I’m putting out my shingle … I’m going independent … and I’m praying I won’t starve.&lt;/p&gt;

&lt;p&gt;I feel blessed with the opportunities I’ve encountered along my journey, and lately I have had a strong urge to strike out on my own. I want to experience what it’s like to be an independent business owner, and I am excited for the opportunity to work with extremely smart developers as I continue this path.&lt;/p&gt;

&lt;p&gt;I’m also curious if I will come to love this new freedom or if I’ll hang myself with it.&lt;/p&gt;

&lt;h2 id=&quot;but-why-are-you-leaving-elevator-up&quot;&gt;But why are you leaving Elevator Up?&lt;/h2&gt;

&lt;p&gt;Elevator Up has been such a great experience. Both Aaron and Dayna are great guys and they truly care about both their employees and their clients.&lt;/p&gt;

&lt;p&gt;One thing I really appreciate about my experience at Elevator Up has been my exposure to many different communities and business models. Even though I’m going independent, I don’t feel like I’m leaving Elevator Up, but instead that I’m staying focused on the development community to which I feel the most attached.&lt;/p&gt;

&lt;p&gt;This transition allows me to stay specialized in the my sphere while at the same time still being able to work with the gang at Elevator Up in areas where my strengths shine. It also allows me to engage with clients that may not have originally been a good fit for Elevator Up, but then allow me to bring Elevator Up into the conversation as they grow.&lt;/p&gt;

&lt;p&gt;Aaron once said the phrase “Just because you work independent, doesn’t meant you work alone” and I’m pumped that I am continuing my relationship with Elevator Up, but in just a different light.&lt;/p&gt;

&lt;h2 id=&quot;ok-what-do-you-really-think-about-elevator-up&quot;&gt;Ok, what do you &lt;em&gt;really&lt;/em&gt; think about Elevator Up?&lt;/h2&gt;

&lt;p&gt;Just that, Elevator Up is a great place to work and a great family. I think the people who know me best know that I’m too honest to say it any other way. And frankly, I don’t have the energy to put up a false ruse.&lt;/p&gt;

&lt;p&gt;I’m excited for this next adventure, and I’m grateful for the support of my Wife, my friends, and especially my family at Elevator Up.&lt;/p&gt;

&lt;p&gt;If you want to talk more about my transition or have any Ruby/Rails projects feel free to &lt;a href=&quot;/about&quot;&gt;read about my experience&lt;/a&gt; and send me an email at zach -dot- moazeni -at- gmail -dot- com.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Great perspective on incentive and value</title>
   <link href="/blog/2010/05/great-perspective-on-incentive-and-value"/>
   <updated>2010-05-20T16:08:03+00:00</updated>
   <id>/blog/2010/05/great-perspective-on-incentive-and-value</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;“Finally, I don’t think there’s much value in arguing over who has the most incentive to create good products. The point is you’ll be better off in the long-term if you delivery high-value high-quality products, regardless of whether you’re a consultancy, startup, or enterprise shop.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– &lt;a href=&quot;http://www.patmaddox.com/&quot;&gt;Pat Maddox&lt;/a&gt; on &lt;a href=&quot;http://www.patmaddox.com/2010/05/19/are-you-punching-your-users-in-the-face/&quot;&gt;Are you punching your users in the face?&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Review: Crucial Conversations</title>
   <link href="/blog/2010/05/review-crucial-conversations"/>
   <updated>2010-05-18T01:55:08+00:00</updated>
   <id>/blog/2010/05/review-crucial-conversations</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Months ago I shared my difficulties with leading others and sharing opinions effectively with Josh Little from &lt;a href=&quot;http://www.bloomfire.com/&quot;&gt;Bloomfire&lt;/a&gt;. He recommended I pick up the book &lt;a href=&quot;http://www.amazon.com/dp/0071401946?tag=tibesti-20&quot;&gt;Crucial Conversations&lt;/a&gt; and even mentioned he has had to re-read it many times over the years. It was the first book I finished on my vacation, and I am very grateful for his recommendation.&lt;/p&gt;

&lt;p&gt;After the first few pages, I was initially put off by the number of buzzwords and new vocabulary (e.g. “shared pool of meaning”). I often get turned off with authors who would rather invent vague terminology than give clear meaning. However despite the capitalization, I felt the book provided great insight.&lt;/p&gt;

&lt;p&gt;Some especially key take-aways for me were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reaffirmation to first improve myself especially since it’s much easier than trying to change others.&lt;/li&gt;
  &lt;li&gt;The differences between content and context. I certainly get bogged down with specifically what someone says rather than thinking about their frame of mind. Or what they’re not saying and merely hinting at.&lt;/li&gt;
  &lt;li&gt;Highlighting the connection between open dialogue and a safe environment, with steps on helping set the context in a safe way.&lt;/li&gt;
  &lt;li&gt;The differences between apologizing vs contrasting, and when apologizing is and isn’t appropriate. This book helped me realize that I’ve used apologizing as a social crutch rather than expressing regret over a transgression.&lt;/li&gt;
  &lt;li&gt;I liked the authors opinion on attitude, and how someone else doesn’t change your attitude, you ultimately control your attitude and your actions that result from it.&lt;/li&gt;
  &lt;li&gt;I think the authors did a great job emphasizing the scenarios of how conversations could be handled better. They didn’t just throw out their points for their readers to interpret alone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And for my biggest take-away: I appreciated that the book focused more on positive, open-minded dialogue and not subversive techniques to manipulate someone else. The points in the book were meant for the contentious and not for the silver-tongued. That just feels right to me.&lt;/p&gt;

&lt;p&gt;So along with Josh, I wholeheartedly recommend this book. I feel it can help bridge communication break downs between couples and peers alike.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Vacation Reading</title>
   <link href="/blog/2010/05/my-vacation-reading"/>
   <updated>2010-05-15T14:41:06+00:00</updated>
   <id>/blog/2010/05/my-vacation-reading</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Every time I go on an extended vacation I end up ripping through a half dozen books. It’s probably because of a need to catch up on long overdue reading. Though I have noticed that it mentally refreshes me much more than watching episodes of &lt;a href=&quot;http://en.wikipedia.org/wiki/Lost_(TV_series)&quot;&gt;LOST&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here was this vacation’s reading list. I’m planning on writing up my summary for each of the books which were all good in their own way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/uploads/2010/05/IMG_0489.jpg&quot;&gt;&lt;img src=&quot;/uploads/2010/05/IMG_0489.jpg&quot; alt=&quot;Crucial Confrontations, Book Yourself Solid, The Go-Giver, The Little Gold Book of Yes! Attitude, The Little Red Book of Selling&quot; title=&quot;Vacation Reading List&quot; width=&quot;500&quot; class=&quot;aligncenter size-full wp-image-291&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Muscle Memory</title>
   <link href="/blog/2010/04/muscle-memory"/>
   <updated>2010-04-15T01:48:01+00:00</updated>
   <id>/blog/2010/04/muscle-memory</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Two years ago, I made the commitment to switch the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard&quot;&gt;Dvorak Layout&lt;/a&gt; and I think my wrists thank me. When I first started, I heard a lot of concern from others that learning Dvorak would harm their &lt;a href=&quot;http://en.wikipedia.org/wiki/QWERTY&quot;&gt;Qwerty&lt;/a&gt; typing. But I dismissed it as lazy FUD.&lt;/p&gt;

&lt;p&gt;After two years, I’m admitting I was wrong.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-still-use-qwerty&quot;&gt;Why do I still use Qwerty&lt;/h2&gt;

&lt;p&gt;I vastly prefer working in Dvorak, however there are plenty of scenarios when I need to work in Qwerty. Pair-programming and directly administering servers have been two recurring situations that force me to consistently finger-stutter.&lt;/p&gt;

&lt;h2 id=&quot;what-is-it-like&quot;&gt;What is it like?&lt;/h2&gt;

&lt;p&gt;I didn’t forget Qwerty, but after working in Dvorak so long I have to take pauses when I switch. Or I’ll rip through a word, only to realize I typed it in the other layout. Other annoyances pop out such as Copy/Paste, Mac Preferences (Dvorak uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; which keeps closing windows), and Mac switching tabs (Dvorak uses &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt; which keeps changing the font of Textmate/Terminal/Browsers).&lt;/p&gt;

&lt;p&gt;A different way of explaining these finger-stutters: I like to joke around when someone asks me a VIM command. I tell them “I don’t know, but my fingers do”, and I typically will touch a keyboard, do the command they asked, then tell them the command.&lt;/p&gt;

&lt;h2 id=&quot;what-ive-been-doing-to-fix-this&quot;&gt;What I’ve been doing to fix this&lt;/h2&gt;

&lt;p&gt;So instead of using Dvorak exclusively, then jumping into Qwerty when pairing I’ve resorted to picking a layout at the beginning of the day and working with it the entire day. This has helped keep my muscle memory in shape.&lt;/p&gt;

&lt;p&gt;I still have problems when switching in and out of Dvorak and Qwerty (e.g. one hour in one layout, then the next hour in the other layout). Perhaps over time I’ll be able to easily switch between the two, but I’m not there yet.&lt;/p&gt;

&lt;p&gt;If I notice I am hammering the DELETE key, I’ll open up text pad and rip though a few &lt;a href=&quot;http://en.wikipedia.org/wiki/Pangram&quot;&gt;Panagrams&lt;/a&gt;. At first I used the common “The quick brown fox…”, but then I realized my fingers were committing that sentence to memory. So now I’ll open up a site with &lt;a href=&quot;http://infinityandbeyond0.tripod.com/id15.html&quot;&gt;a list of panagrams&lt;/a&gt; and randomly select a few to type out.&lt;/p&gt;

&lt;h2 id=&quot;has-learning-dvorak-been-worth-it&quot;&gt;Has learning Dvorak been worth it?&lt;/h2&gt;

&lt;p&gt;This is hard to answer, but I think so. Like I said I do vastly prefer the Dvorak layout, but I do think it’s important to stay realistic that you’ll have to occasionally use Qwerty. However maintaining muscle memory has been a lot more work than I originally guessed.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Harvested: A New Ruby API Wrapper</title>
   <link href="/blog/2010/04/harvested-a-new-ruby-api-wrapper"/>
   <updated>2010-04-11T18:17:02+00:00</updated>
   <id>/blog/2010/04/harvested-a-new-ruby-api-wrapper</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I’ve used &lt;a href=&quot;http://www.getharvest.com/&quot;&gt;Harvest Time Tracking&lt;/a&gt; for well over 3 years, and they have a quality product. They have also had a published API for quite some time. The past couple weeks I’ve been working on Ruby API wrapper for it, and today I’ve pushed the first release.&lt;/p&gt;

&lt;h2 id=&quot;harvested&quot;&gt;Harvested&lt;/h2&gt;

&lt;p&gt;Harvested is a thin wrapper around their API based on HTTParty and HappyMapper.&lt;/p&gt;

&lt;p&gt;You can go grab and install it through RubyGems (make sure the Gemcutter source is set):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; gem install harvested
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A couple quick examples of how to use this API:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require &quot;harvested&quot;
harvest = Harvest.hardy_client('yoursubdomain', 'yourusername', 'userpassword', :ssl =&amp;gt; false)

# Print out all users, clients, and projects on the account
puts &quot;Users:&quot;
harvest.users.all.each {|u| p u }

puts &quot;Clients:&quot;
harvest.clients.all.each {|c| p c }

puts &quot;Projects:&quot;
harvest.projects.all.each {|project| p project }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;More examples are included in &lt;code class=&quot;highlighter-rouge&quot;&gt;/examples&lt;/code&gt; along with the gem.&lt;/p&gt;

&lt;h2 id=&quot;standard-client-vs-hardy-client&quot;&gt;Standard Client vs Hardy Client&lt;/h2&gt;

&lt;p&gt;The guys at Harvest built a great API, but there are always dangers in writing code that depends on an API. For example, HTTP Timeouts, Occasional Bad Gateways, and Rate Limiting issues need to be accounted for.&lt;/p&gt;

&lt;p&gt;There are two clients available in the gem, &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hardy_client&lt;/code&gt;. If you want to deal with the issues manually, feel free to use &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; otherwise &lt;code class=&quot;highlighter-rouge&quot;&gt;hardy_client&lt;/code&gt; provides a friendly wrapper that retries errors and waits for rate limit resets.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rdoc.info/projects/zmoazeni/harvested&quot;&gt;Harvested Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rubygems.org/gems/harvested&quot;&gt;Gem on Gemcutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/zmoazeni/harvested&quot;&gt;Source Code on Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.getharvest.com/api&quot;&gt;Harvest API Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/harvested&quot;&gt;Mailing List for Harvested&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;update---4122010&quot;&gt;Update - 4/12/2010&lt;/h2&gt;

&lt;p&gt;I started documenting the codebase, so I added a link to the &lt;a href=&quot;http://rdoc.info&quot;&gt;rdoc.info&lt;/a&gt; documentation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reflections of an Adjunct Professor</title>
   <link href="/blog/2010/04/reflections-of-an-adjunct-professor"/>
   <updated>2010-04-07T02:51:59+00:00</updated>
   <id>/blog/2010/04/reflections-of-an-adjunct-professor</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;This past semester I had the opportunity to teach the Advanced Java course at &lt;a href=&quot;http://www.grcc.edu/&quot;&gt;GRCC&lt;/a&gt;. Teaching at the college level has been something I’ve wanted to experience for a while and it is also quite aligned with &lt;a href=&quot;/vision-statement&quot;&gt;my values&lt;/a&gt;. While I was excited to start the semester, I was a bit nervous at how my first class would turn out. As the semester progressed, I kept a list of failures and successes that would help me grow as a teacher. I hope this list helps other instructors as they start their career.&lt;/p&gt;

&lt;h3 id=&quot;using-different-tools&quot;&gt;Using Different Tools&lt;/h3&gt;

&lt;p&gt;One decision I made early on was that I would never use PowerPoint. I think the static nature of PowerPoint slides completely disengage students and detract from the learning experience. I was lucky to be introduced to &lt;a href=&quot;http://prezi.com/&quot;&gt;Prezi&lt;/a&gt; months prior from a friend, and at the time I knew it would be a great alternative to boring slides.&lt;/p&gt;

&lt;p&gt;For instructors that haven’t created a screencast before, I strongly recommend investigating them. I used &lt;a href=&quot;http://www.ambrosiasw.com/utilities/snapzprox/&quot;&gt;SnapXPro&lt;/a&gt; and &lt;a href=&quot;http://vimeo.com/&quot;&gt;Vimeo&lt;/a&gt;, but there are many other alternates out there.&lt;/p&gt;

&lt;p&gt;Google Docs was a great aid in creating Labs and Surveys. Legos were excellent in illustrating concurrency, especially regarding context-switching. Omnigraffle and Apple Screen Shots were also a big boon when creating my lectures.&lt;/p&gt;

&lt;h3 id=&quot;time-spent-preparing-for-classes&quot;&gt;Time Spent Preparing for Classes&lt;/h3&gt;

&lt;p&gt;I was repeatedly warned by seasoned instructors that the first class is the hardest. But I was completely taken back at how much time I would spend preparing for lectures. The course I taught didn’t have a prior curriculum, and it went against my nature just to teach directly from a textbook. Yet I spent around 5-6 hours a week just putting together the lecture and the accompanying lab.&lt;/p&gt;

&lt;p&gt;A lot of time was spent on planning the goals of the lectures, preparing them on &lt;a href=&quot;http://prezi.com/&quot;&gt;Prezi&lt;/a&gt;, creating the labs, and grading the previous week’s labs. I worked hard to craft labs that didn’t just evaluate whether the student understood the concept, but supplemented the learning experience from the lecture.&lt;/p&gt;

&lt;p&gt;I approximate I’ve spent on average 12 hours a week to prepare for a one night-a-week course.&lt;/p&gt;

&lt;h3 id=&quot;going-over-prepared-material&quot;&gt;Going Over Prepared Material&lt;/h3&gt;

&lt;p&gt;I found early on that not going over the material you’ve prepared can really bite you. It helped tremendously to write the solution code to the labs before I gave them the assignments. There was always something I needed to tweak in terms of problem descriptions. Even though I consider myself a good developer, if I just put together an assignment without fleshing out a solution myself, the resulting code would become tedious and lose the original intent.&lt;/p&gt;

&lt;p&gt;One requirement as innocuous as ‘Format a collection of strings so the output results in: “string1, string2, string3 and string4.”’ had students spending the majority of their time in the wrong area which in turn clouded the lesson.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Oddly enough, that requirement worked well when teaching Unit Testing.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;office-hours&quot;&gt;Office Hours&lt;/h3&gt;

&lt;p&gt;I think I was one of the few adjuncts who offered office hours. Working at &lt;a href=&quot;http://elevatorup.com&quot;&gt;Elevator Up&lt;/a&gt; I took advantage of our great space at &lt;a href=&quot;http://workthefactory.com&quot;&gt;The Factory&lt;/a&gt; and posted weekly office hours. Despite the Holland-to-GR commute, office hours were an excellent opportunity to have a regular checkpoint for myself to focus on the class. Every Thursday evening from 5 - 7 I knew I would be working on my class.&lt;/p&gt;

&lt;p&gt;Some instructors mention that students don’t take advantage of their office hours. I had students show up about 50% of the time. I do think that scheduling can be important though. I had a few students mention that they had another class or had to work during those hours, and for those I was very clear that I would make myself available for scheduling issues.&lt;/p&gt;

&lt;h3 id=&quot;people-fall-asleep&quot;&gt;People Fall Asleep&lt;/h3&gt;

&lt;p&gt;I know students fall asleep in class. I even remember times when I did it. But boy is it a shock to be mid-sentence and spot one student nodding off and see another drooling. I think it took all of my willpower to stay focused on the lecture.&lt;/p&gt;

&lt;p&gt;To other new teachers, don’t take it as an insult. Evening classes in warm rooms can bring down even the most alert. And mentally prepare yourself, because I was completely taken aback.&lt;/p&gt;

&lt;h3 id=&quot;i-love-kinkos&quot;&gt;I love Kinkos&lt;/h3&gt;

&lt;p&gt;Most college offices have great equipment for making copies of exams and syllabuses, but I sure love Kinkos. For $10, they would take a PDF from a USB thumbdrive, print and staple many copies in less than 15 minutes. I know it sounds spoiled, but $10 for saving that time was well worth it to me.&lt;/p&gt;

&lt;h3 id=&quot;due-dates&quot;&gt;Due Dates&lt;/h3&gt;

&lt;p&gt;I might have been described as a strict teacher in the way I accepted assignments. I had a simple rule:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Full Credit was only awarded if the assignment was turned in before the next lecture started&lt;/li&gt;
  &lt;li&gt;I would accept the assignment late 1 day for Half Credit&lt;/li&gt;
  &lt;li&gt;I would not accept an assignment after 1 day late.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This does come across harsh, but I believe this stance carries it’s own benefits.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It helps teach the importance of time management.&lt;/li&gt;
  &lt;li&gt;I wasn’t bombarded by a slew of 3-week late assignments at the end of the semester.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, I held myself to the same standard. If I would require my students turn in assignments on time, I would hand them back on time.&lt;/p&gt;

&lt;p&gt;That being said, I do recommend keeping a pulse on the class. There was one instance where I was flexible and extended the deadline of a project 1 week, but I awarded extra credit for the students who turned in their work by the original deadline.&lt;/p&gt;

&lt;h3 id=&quot;pacing-concepts&quot;&gt;Pacing Concepts&lt;/h3&gt;

&lt;p&gt;Another lesson I learned early on was pacing. My early lectures made some pretty large leaps, and while they seemed fairly logical to me it dawned on me that I needed to slow down.&lt;/p&gt;

&lt;p&gt;That doesn’t mean my students were slow, or that I went to the extreme to ‘dumb down’ my lectures. However there is a sweet spot between being painstakingly redundant and breezing through concepts. This is still an area that I need to work on.&lt;/p&gt;

&lt;h3 id=&quot;connecting-with-students&quot;&gt;Connecting with Students&lt;/h3&gt;

&lt;p&gt;After realizing that I needed to work on pacing, I stumbled upon one of the biggest take-aways for me as an instructor: Connecting with Strangers. I am leading a group of strangers that I not only want to convey new material to, but I want to connect on a level that draws at that ‘Aha!’ moment for each one of them. That is hard enough with an individual, let alone a classroom.&lt;/p&gt;

&lt;p&gt;This was a very humbling experience for me and I think one area in which I learned the most from my students. Good teachers connect with their students, they don’t just lecture.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;I had such a great experience teaching my first semester. I’d like to thank my wife for bearing with me these past four months. Especially, so soon after our newborn. I’d also like to thank my company &lt;a href=&quot;http://elevatorup.com&quot;&gt;Elevator Up&lt;/a&gt; for encouraging me to explore this avenue.&lt;/p&gt;

&lt;p&gt;I’ve been asked if I will teach another class. If the opportunity presents itself, I may, but I now have more respect for the amount of effort teaching requires. Regardless, I did have fun and I learned more about myself and about communicating with others.&lt;/p&gt;

&lt;p&gt;I welcome feedback from other teachers and how their early experiences went.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction to Rails Talk: GVSU Mobile Developers Group</title>
   <link href="/blog/2010/03/introduction-to-rails-talk-gvsu-mobile-developers-group"/>
   <updated>2010-03-03T01:23:59+00:00</updated>
   <id>/blog/2010/03/introduction-to-rails-talk-gvsu-mobile-developers-group</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;Here is the Prezi talk I gave to the GVSU Mobile Developer User Group.&lt;/p&gt;

&lt;div class=&quot;prezi-player&quot;&gt;&lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;.prezi-player { width: 550px; } .prezi-player-links { text-align: center; }&lt;/style&gt;&lt;object id=&quot;prezi_v0apok8pqf9x&quot; name=&quot;prezi_v0apok8pqf9x&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; width=&quot;550&quot; height=&quot;400&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://prezi.com/bin/preziloader.swf&quot; /&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#ffffff&quot; /&gt;&lt;param name=&quot;flashvars&quot; value=&quot;prezi_id=v0apok8pqf9x&amp;amp;lock_to_path=0&amp;amp;color=ffffff&amp;amp;autoplay=no&quot; /&gt;&lt;embed id=&quot;preziEmbed_v0apok8pqf9x&quot; name=&quot;preziEmbed_v0apok8pqf9x&quot; src=&quot;http://prezi.com/bin/preziloader.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;550&quot; height=&quot;400&quot; bgcolor=&quot;#ffffff&quot; flashvars=&quot;prezi_id=v0apok8pqf9x&amp;amp;lock_to_path=0&amp;amp;color=ffffff&amp;amp;autoplay=no&quot; /&gt;&amp;lt;/embed&amp;gt;&lt;/object&gt;&lt;div class=&quot;prezi-player-links&quot;&gt;&lt;p&gt;Published via &lt;a href=&quot;http://prezi.com&quot;&gt;Prezi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>My First Introduction to Haskell Extensions: FlexibleInstances</title>
   <link href="/blog/2009/07/my-first-introduction-to-haskell-extensions-flexibleinstances"/>
   <updated>2009-07-27T00:28:53+00:00</updated>
   <id>/blog/2009/07/my-first-introduction-to-haskell-extensions-flexibleinstances</id>
   <author>
     <name>Zach Moazeni</name>
     <email>zach.moazeni@gmail.com</email>
   </author>
   <content type="html">&lt;p&gt;I’ve been tinkering with Haskell lately, and I came across an odd issue. Let’s say I want to create a class that takes Integers, Characters, and Strings and returns an Integer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Something a where
  doSomething :: a -&amp;gt; Integer

instance Something Integer where
  doSomething x = 1

instance Something Char where
  doSomething x = 2

instance Something [Char] where
  doSomething x = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Trying to load this into the interpreter (or compiling it) results in the an error on the &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;[Char]&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Illegal instance declaration for `Something [Char]'
  (All instance types must be of the form (T a1 ... an)
  where a1 ... an are type *variables*,
  and each type variable appears at most once in the instance head.
  Use -XFlexibleInstances if you want to disable this.)
In the instance declaration for `Something [Char]'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This cryptic message essentially means that I can’t make &lt;code class=&quot;highlighter-rouge&quot;&gt;[Char]&lt;/code&gt; an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Something&lt;/code&gt; class, but I could make &lt;code class=&quot;highlighter-rouge&quot;&gt;[a]&lt;/code&gt; one (a list containing any type)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;instance Something [a] where
  doSomething x = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However that stinks because then I have to do a lot more work to differentiate between a list of characters (i.e. Strings) and a list of integers.&lt;/p&gt;

&lt;p&gt;The error message mentions a way to disable that check, and the helpful guys at &lt;a href=&quot;http://freenode.net/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#haskell&lt;/code&gt;&lt;/a&gt; gave me a hand.&lt;/p&gt;

&lt;p&gt;If you put this at the top of your source file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;LANGUAGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;FlexibleInstances&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;you end up telling Haskell to load the extension &lt;code class=&quot;highlighter-rouge&quot;&gt;FlexibleInstances&lt;/code&gt; which allows you to differentiate between lists of characters, integers, or whatever else. Which allows you to load in:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- in file TestingTypes.hs
{-# LANGUAGE FlexibleInstances #-}

class Something a where
  doSomething :: a -&amp;gt; Integer

instance Something Integer where
  doSomething x = 1

instance Something Char where
  doSomething x = 2

instance Something [Char] where
  doSomething x = 3

-- in ghci:
Prelude&amp;gt; :l TestingTypes.hs
[1 of 1] Compiling TestingTypes     ( TestingTypes.hs, interpreted )
Ok, modules loaded: TestingTypes.
*TestingTypes&amp;gt; doSomething 1
1
*TestingTypes&amp;gt; doSomething 'c'
2
*TestingTypes&amp;gt; doSomething &quot;foo&quot;
3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nothing ground breaking, but I thought I’d pass this tidbit along.&lt;/p&gt;
</content>
 </entry>
 

</feed>

    
  </main>

  <footer class="row align-center text-center">
    <p class="column">&copy; 2007-2018 Zach Moazeni</p>
  </footer>

  <script src="/js/main.min.js"></script>
</body>
</html>

